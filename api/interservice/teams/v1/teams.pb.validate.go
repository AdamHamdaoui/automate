// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/interservice/teams/v1/teams.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateTeamReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateTeamReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// CreateTeamReqValidationError is the validation error returned by
// CreateTeamReq.Validate if the designated constraints aren't met.
type CreateTeamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamReqValidationError) ErrorName() string { return "CreateTeamReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTeamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamReqValidationError{}

// Validate checks the field values on CreateTeamResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateTeamResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTeamRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTeamRespValidationError is the validation error returned by
// CreateTeamResp.Validate if the designated constraints aren't met.
type CreateTeamRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRespValidationError) ErrorName() string { return "CreateTeamRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateTeamRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRespValidationError{}

// Validate checks the field values on UpdateTeamReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateTeamReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// UpdateTeamReqValidationError is the validation error returned by
// UpdateTeamReq.Validate if the designated constraints aren't met.
type UpdateTeamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamReqValidationError) ErrorName() string { return "UpdateTeamReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTeamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamReqValidationError{}

// Validate checks the field values on UpdateTeamResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateTeamResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTeamRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTeamRespValidationError is the validation error returned by
// UpdateTeamResp.Validate if the designated constraints aren't met.
type UpdateTeamRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamRespValidationError) ErrorName() string { return "UpdateTeamRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTeamRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamRespValidationError{}

// Validate checks the field values on DeleteTeamReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteTeamReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteTeamReqValidationError is the validation error returned by
// DeleteTeamReq.Validate if the designated constraints aren't met.
type DeleteTeamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeamReqValidationError) ErrorName() string { return "DeleteTeamReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTeamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeamReqValidationError{}

// Validate checks the field values on DeleteTeamResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteTeamResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTeamRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteTeamRespValidationError is the validation error returned by
// DeleteTeamResp.Validate if the designated constraints aren't met.
type DeleteTeamRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeamRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeamRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeamRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeamRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeamRespValidationError) ErrorName() string { return "DeleteTeamRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTeamRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeamResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeamRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeamRespValidationError{}

// Validate checks the field values on GetTeamsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTeamsReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetTeamsReqValidationError is the validation error returned by
// GetTeamsReq.Validate if the designated constraints aren't met.
type GetTeamsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsReqValidationError) ErrorName() string { return "GetTeamsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsReqValidationError{}

// Validate checks the field values on GetTeamsResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTeamsResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamsRespValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTeamsRespValidationError is the validation error returned by
// GetTeamsResp.Validate if the designated constraints aren't met.
type GetTeamsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsRespValidationError) ErrorName() string { return "GetTeamsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsRespValidationError{}

// Validate checks the field values on GetTeamReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetTeamReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetTeamReqValidationError is the validation error returned by
// GetTeamReq.Validate if the designated constraints aren't met.
type GetTeamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamReqValidationError) ErrorName() string { return "GetTeamReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamReqValidationError{}

// Validate checks the field values on GetTeamResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTeamResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeamRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTeamRespValidationError is the validation error returned by
// GetTeamResp.Validate if the designated constraints aren't met.
type GetTeamRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamRespValidationError) ErrorName() string { return "GetTeamRespValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamRespValidationError{}

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Team) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}

// Validate checks the field values on AddUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUsersReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AddUsersReqValidationError is the validation error returned by
// AddUsersReq.Validate if the designated constraints aren't met.
type AddUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUsersReqValidationError) ErrorName() string { return "AddUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUsersReqValidationError{}

// Validate checks the field values on AddUsersResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUsersResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUsersRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddUsersRespValidationError is the validation error returned by
// AddUsersResp.Validate if the designated constraints aren't met.
type AddUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUsersRespValidationError) ErrorName() string { return "AddUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e AddUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUsersRespValidationError{}

// Validate checks the field values on RemoveUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RemoveUsersReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemoveUsersReqValidationError is the validation error returned by
// RemoveUsersReq.Validate if the designated constraints aren't met.
type RemoveUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsersReqValidationError) ErrorName() string { return "RemoveUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsersReqValidationError{}

// Validate checks the field values on RemoveUsersResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveUsersResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveUsersRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveUsersRespValidationError is the validation error returned by
// RemoveUsersResp.Validate if the designated constraints aren't met.
type RemoveUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsersRespValidationError) ErrorName() string { return "RemoveUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e RemoveUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsersRespValidationError{}

// Validate checks the field values on PurgeUserMembershipReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PurgeUserMembershipReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// PurgeUserMembershipReqValidationError is the validation error returned by
// PurgeUserMembershipReq.Validate if the designated constraints aren't met.
type PurgeUserMembershipReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeUserMembershipReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeUserMembershipReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeUserMembershipReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeUserMembershipReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeUserMembershipReqValidationError) ErrorName() string {
	return "PurgeUserMembershipReqValidationError"
}

// Error satisfies the builtin error interface
func (e PurgeUserMembershipReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeUserMembershipReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeUserMembershipReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeUserMembershipReqValidationError{}

// Validate checks the field values on PurgeUserMembershipResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PurgeUserMembershipResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PurgeUserMembershipRespValidationError is the validation error returned by
// PurgeUserMembershipResp.Validate if the designated constraints aren't met.
type PurgeUserMembershipRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeUserMembershipRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeUserMembershipRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeUserMembershipRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeUserMembershipRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeUserMembershipRespValidationError) ErrorName() string {
	return "PurgeUserMembershipRespValidationError"
}

// Error satisfies the builtin error interface
func (e PurgeUserMembershipRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeUserMembershipResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeUserMembershipRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeUserMembershipRespValidationError{}

// Validate checks the field values on GetTeamsForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTeamsForUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetTeamsForUserReqValidationError is the validation error returned by
// GetTeamsForUserReq.Validate if the designated constraints aren't met.
type GetTeamsForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsForUserReqValidationError) ErrorName() string {
	return "GetTeamsForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamsForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsForUserReqValidationError{}

// Validate checks the field values on GetTeamsForUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTeamsForUserResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamsForUserRespValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTeamsForUserRespValidationError is the validation error returned by
// GetTeamsForUserResp.Validate if the designated constraints aren't met.
type GetTeamsForUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsForUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsForUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsForUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsForUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsForUserRespValidationError) ErrorName() string {
	return "GetTeamsForUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamsForUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsForUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsForUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsForUserRespValidationError{}

// Validate checks the field values on GetTeamByNameReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTeamByNameReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GetTeamByNameReqValidationError is the validation error returned by
// GetTeamByNameReq.Validate if the designated constraints aren't met.
type GetTeamByNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamByNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamByNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamByNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamByNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamByNameReqValidationError) ErrorName() string { return "GetTeamByNameReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamByNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamByNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamByNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamByNameReqValidationError{}

// Validate checks the field values on GetTeamByNameResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTeamByNameResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeamByNameRespValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTeamByNameRespValidationError is the validation error returned by
// GetTeamByNameResp.Validate if the designated constraints aren't met.
type GetTeamByNameRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamByNameRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamByNameRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamByNameRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamByNameRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamByNameRespValidationError) ErrorName() string {
	return "GetTeamByNameRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamByNameRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamByNameResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamByNameRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamByNameRespValidationError{}

// Validate checks the field values on GetUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUsersReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetUsersReqValidationError is the validation error returned by
// GetUsersReq.Validate if the designated constraints aren't met.
type GetUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersReqValidationError) ErrorName() string { return "GetUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersReqValidationError{}

// Validate checks the field values on GetUsersResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUsersResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetUsersRespValidationError is the validation error returned by
// GetUsersResp.Validate if the designated constraints aren't met.
type GetUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRespValidationError) ErrorName() string { return "GetUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRespValidationError{}
