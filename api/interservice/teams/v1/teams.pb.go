// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/teams/v1/teams.proto

package v1

import (
	context "context"
	fmt "fmt"
	version "github.com/chef/automate/api/external/common/version"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateTeamReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateTeamReq) Reset()         { *m = CreateTeamReq{} }
func (m *CreateTeamReq) String() string { return proto.CompactTextString(m) }
func (*CreateTeamReq) ProtoMessage()    {}
func (*CreateTeamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{0}
}

func (m *CreateTeamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTeamReq.Unmarshal(m, b)
}
func (m *CreateTeamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTeamReq.Marshal(b, m, deterministic)
}
func (m *CreateTeamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamReq.Merge(m, src)
}
func (m *CreateTeamReq) XXX_Size() int {
	return xxx_messageInfo_CreateTeamReq.Size(m)
}
func (m *CreateTeamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamReq proto.InternalMessageInfo

func (m *CreateTeamReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTeamReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateTeamResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateTeamResp) Reset()         { *m = CreateTeamResp{} }
func (m *CreateTeamResp) String() string { return proto.CompactTextString(m) }
func (*CreateTeamResp) ProtoMessage()    {}
func (*CreateTeamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{1}
}

func (m *CreateTeamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTeamResp.Unmarshal(m, b)
}
func (m *CreateTeamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTeamResp.Marshal(b, m, deterministic)
}
func (m *CreateTeamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamResp.Merge(m, src)
}
func (m *CreateTeamResp) XXX_Size() int {
	return xxx_messageInfo_CreateTeamResp.Size(m)
}
func (m *CreateTeamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamResp proto.InternalMessageInfo

func (m *CreateTeamResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type UpdateTeamReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateTeamReq) Reset()         { *m = UpdateTeamReq{} }
func (m *UpdateTeamReq) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamReq) ProtoMessage()    {}
func (*UpdateTeamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{2}
}

func (m *UpdateTeamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTeamReq.Unmarshal(m, b)
}
func (m *UpdateTeamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTeamReq.Marshal(b, m, deterministic)
}
func (m *UpdateTeamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamReq.Merge(m, src)
}
func (m *UpdateTeamReq) XXX_Size() int {
	return xxx_messageInfo_UpdateTeamReq.Size(m)
}
func (m *UpdateTeamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamReq proto.InternalMessageInfo

func (m *UpdateTeamReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateTeamReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateTeamReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateTeamResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateTeamResp) Reset()         { *m = UpdateTeamResp{} }
func (m *UpdateTeamResp) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamResp) ProtoMessage()    {}
func (*UpdateTeamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{3}
}

func (m *UpdateTeamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTeamResp.Unmarshal(m, b)
}
func (m *UpdateTeamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTeamResp.Marshal(b, m, deterministic)
}
func (m *UpdateTeamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamResp.Merge(m, src)
}
func (m *UpdateTeamResp) XXX_Size() int {
	return xxx_messageInfo_UpdateTeamResp.Size(m)
}
func (m *UpdateTeamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamResp proto.InternalMessageInfo

func (m *UpdateTeamResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type DeleteTeamReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteTeamReq) Reset()         { *m = DeleteTeamReq{} }
func (m *DeleteTeamReq) String() string { return proto.CompactTextString(m) }
func (*DeleteTeamReq) ProtoMessage()    {}
func (*DeleteTeamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{4}
}

func (m *DeleteTeamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTeamReq.Unmarshal(m, b)
}
func (m *DeleteTeamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTeamReq.Marshal(b, m, deterministic)
}
func (m *DeleteTeamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTeamReq.Merge(m, src)
}
func (m *DeleteTeamReq) XXX_Size() int {
	return xxx_messageInfo_DeleteTeamReq.Size(m)
}
func (m *DeleteTeamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTeamReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTeamReq proto.InternalMessageInfo

func (m *DeleteTeamReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteTeamResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteTeamResp) Reset()         { *m = DeleteTeamResp{} }
func (m *DeleteTeamResp) String() string { return proto.CompactTextString(m) }
func (*DeleteTeamResp) ProtoMessage()    {}
func (*DeleteTeamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{5}
}

func (m *DeleteTeamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTeamResp.Unmarshal(m, b)
}
func (m *DeleteTeamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTeamResp.Marshal(b, m, deterministic)
}
func (m *DeleteTeamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTeamResp.Merge(m, src)
}
func (m *DeleteTeamResp) XXX_Size() int {
	return xxx_messageInfo_DeleteTeamResp.Size(m)
}
func (m *DeleteTeamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTeamResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTeamResp proto.InternalMessageInfo

func (m *DeleteTeamResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type GetTeamsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamsReq) Reset()         { *m = GetTeamsReq{} }
func (m *GetTeamsReq) String() string { return proto.CompactTextString(m) }
func (*GetTeamsReq) ProtoMessage()    {}
func (*GetTeamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{6}
}

func (m *GetTeamsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamsReq.Unmarshal(m, b)
}
func (m *GetTeamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamsReq.Marshal(b, m, deterministic)
}
func (m *GetTeamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsReq.Merge(m, src)
}
func (m *GetTeamsReq) XXX_Size() int {
	return xxx_messageInfo_GetTeamsReq.Size(m)
}
func (m *GetTeamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsReq proto.InternalMessageInfo

type GetTeamsResp struct {
	Teams                []*Team  `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" toml:"teams,omitempty" mapstructure:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamsResp) Reset()         { *m = GetTeamsResp{} }
func (m *GetTeamsResp) String() string { return proto.CompactTextString(m) }
func (*GetTeamsResp) ProtoMessage()    {}
func (*GetTeamsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{7}
}

func (m *GetTeamsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamsResp.Unmarshal(m, b)
}
func (m *GetTeamsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamsResp.Marshal(b, m, deterministic)
}
func (m *GetTeamsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsResp.Merge(m, src)
}
func (m *GetTeamsResp) XXX_Size() int {
	return xxx_messageInfo_GetTeamsResp.Size(m)
}
func (m *GetTeamsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsResp proto.InternalMessageInfo

func (m *GetTeamsResp) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type GetTeamReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamReq) Reset()         { *m = GetTeamReq{} }
func (m *GetTeamReq) String() string { return proto.CompactTextString(m) }
func (*GetTeamReq) ProtoMessage()    {}
func (*GetTeamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{8}
}

func (m *GetTeamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamReq.Unmarshal(m, b)
}
func (m *GetTeamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamReq.Marshal(b, m, deterministic)
}
func (m *GetTeamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamReq.Merge(m, src)
}
func (m *GetTeamReq) XXX_Size() int {
	return xxx_messageInfo_GetTeamReq.Size(m)
}
func (m *GetTeamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamReq proto.InternalMessageInfo

func (m *GetTeamReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTeamResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamResp) Reset()         { *m = GetTeamResp{} }
func (m *GetTeamResp) String() string { return proto.CompactTextString(m) }
func (*GetTeamResp) ProtoMessage()    {}
func (*GetTeamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{9}
}

func (m *GetTeamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamResp.Unmarshal(m, b)
}
func (m *GetTeamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamResp.Marshal(b, m, deterministic)
}
func (m *GetTeamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamResp.Merge(m, src)
}
func (m *GetTeamResp) XXX_Size() int {
	return xxx_messageInfo_GetTeamResp.Size(m)
}
func (m *GetTeamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamResp proto.InternalMessageInfo

func (m *GetTeamResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type Team struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{10}
}

func (m *Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Team.Unmarshal(m, b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Team.Marshal(b, m, deterministic)
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return xxx_messageInfo_Team.Size(m)
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type AddUsersReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	UserIds              []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *AddUsersReq) Reset()         { *m = AddUsersReq{} }
func (m *AddUsersReq) String() string { return proto.CompactTextString(m) }
func (*AddUsersReq) ProtoMessage()    {}
func (*AddUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{11}
}

func (m *AddUsersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUsersReq.Unmarshal(m, b)
}
func (m *AddUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUsersReq.Marshal(b, m, deterministic)
}
func (m *AddUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUsersReq.Merge(m, src)
}
func (m *AddUsersReq) XXX_Size() int {
	return xxx_messageInfo_AddUsersReq.Size(m)
}
func (m *AddUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddUsersReq proto.InternalMessageInfo

func (m *AddUsersReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddUsersReq) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type AddUsersResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *AddUsersResp) Reset()         { *m = AddUsersResp{} }
func (m *AddUsersResp) String() string { return proto.CompactTextString(m) }
func (*AddUsersResp) ProtoMessage()    {}
func (*AddUsersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{12}
}

func (m *AddUsersResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUsersResp.Unmarshal(m, b)
}
func (m *AddUsersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUsersResp.Marshal(b, m, deterministic)
}
func (m *AddUsersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUsersResp.Merge(m, src)
}
func (m *AddUsersResp) XXX_Size() int {
	return xxx_messageInfo_AddUsersResp.Size(m)
}
func (m *AddUsersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUsersResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddUsersResp proto.InternalMessageInfo

func (m *AddUsersResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type RemoveUsersReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	UserIds              []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *RemoveUsersReq) Reset()         { *m = RemoveUsersReq{} }
func (m *RemoveUsersReq) String() string { return proto.CompactTextString(m) }
func (*RemoveUsersReq) ProtoMessage()    {}
func (*RemoveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{13}
}

func (m *RemoveUsersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveUsersReq.Unmarshal(m, b)
}
func (m *RemoveUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveUsersReq.Marshal(b, m, deterministic)
}
func (m *RemoveUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUsersReq.Merge(m, src)
}
func (m *RemoveUsersReq) XXX_Size() int {
	return xxx_messageInfo_RemoveUsersReq.Size(m)
}
func (m *RemoveUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUsersReq proto.InternalMessageInfo

func (m *RemoveUsersReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveUsersReq) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type RemoveUsersResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *RemoveUsersResp) Reset()         { *m = RemoveUsersResp{} }
func (m *RemoveUsersResp) String() string { return proto.CompactTextString(m) }
func (*RemoveUsersResp) ProtoMessage()    {}
func (*RemoveUsersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{14}
}

func (m *RemoveUsersResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveUsersResp.Unmarshal(m, b)
}
func (m *RemoveUsersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveUsersResp.Marshal(b, m, deterministic)
}
func (m *RemoveUsersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUsersResp.Merge(m, src)
}
func (m *RemoveUsersResp) XXX_Size() int {
	return xxx_messageInfo_RemoveUsersResp.Size(m)
}
func (m *RemoveUsersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUsersResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUsersResp proto.InternalMessageInfo

func (m *RemoveUsersResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type PurgeUserMembershipReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" toml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PurgeUserMembershipReq) Reset()         { *m = PurgeUserMembershipReq{} }
func (m *PurgeUserMembershipReq) String() string { return proto.CompactTextString(m) }
func (*PurgeUserMembershipReq) ProtoMessage()    {}
func (*PurgeUserMembershipReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{15}
}

func (m *PurgeUserMembershipReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeUserMembershipReq.Unmarshal(m, b)
}
func (m *PurgeUserMembershipReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeUserMembershipReq.Marshal(b, m, deterministic)
}
func (m *PurgeUserMembershipReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeUserMembershipReq.Merge(m, src)
}
func (m *PurgeUserMembershipReq) XXX_Size() int {
	return xxx_messageInfo_PurgeUserMembershipReq.Size(m)
}
func (m *PurgeUserMembershipReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeUserMembershipReq.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeUserMembershipReq proto.InternalMessageInfo

func (m *PurgeUserMembershipReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type PurgeUserMembershipResp struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PurgeUserMembershipResp) Reset()         { *m = PurgeUserMembershipResp{} }
func (m *PurgeUserMembershipResp) String() string { return proto.CompactTextString(m) }
func (*PurgeUserMembershipResp) ProtoMessage()    {}
func (*PurgeUserMembershipResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{16}
}

func (m *PurgeUserMembershipResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeUserMembershipResp.Unmarshal(m, b)
}
func (m *PurgeUserMembershipResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeUserMembershipResp.Marshal(b, m, deterministic)
}
func (m *PurgeUserMembershipResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeUserMembershipResp.Merge(m, src)
}
func (m *PurgeUserMembershipResp) XXX_Size() int {
	return xxx_messageInfo_PurgeUserMembershipResp.Size(m)
}
func (m *PurgeUserMembershipResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeUserMembershipResp.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeUserMembershipResp proto.InternalMessageInfo

func (m *PurgeUserMembershipResp) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetTeamsForUserReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" toml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamsForUserReq) Reset()         { *m = GetTeamsForUserReq{} }
func (m *GetTeamsForUserReq) String() string { return proto.CompactTextString(m) }
func (*GetTeamsForUserReq) ProtoMessage()    {}
func (*GetTeamsForUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{17}
}

func (m *GetTeamsForUserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamsForUserReq.Unmarshal(m, b)
}
func (m *GetTeamsForUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamsForUserReq.Marshal(b, m, deterministic)
}
func (m *GetTeamsForUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsForUserReq.Merge(m, src)
}
func (m *GetTeamsForUserReq) XXX_Size() int {
	return xxx_messageInfo_GetTeamsForUserReq.Size(m)
}
func (m *GetTeamsForUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsForUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsForUserReq proto.InternalMessageInfo

func (m *GetTeamsForUserReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetTeamsForUserResp struct {
	Teams                []*Team  `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" toml:"teams,omitempty" mapstructure:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamsForUserResp) Reset()         { *m = GetTeamsForUserResp{} }
func (m *GetTeamsForUserResp) String() string { return proto.CompactTextString(m) }
func (*GetTeamsForUserResp) ProtoMessage()    {}
func (*GetTeamsForUserResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{18}
}

func (m *GetTeamsForUserResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamsForUserResp.Unmarshal(m, b)
}
func (m *GetTeamsForUserResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamsForUserResp.Marshal(b, m, deterministic)
}
func (m *GetTeamsForUserResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsForUserResp.Merge(m, src)
}
func (m *GetTeamsForUserResp) XXX_Size() int {
	return xxx_messageInfo_GetTeamsForUserResp.Size(m)
}
func (m *GetTeamsForUserResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsForUserResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsForUserResp proto.InternalMessageInfo

func (m *GetTeamsForUserResp) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type GetTeamByNameReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamByNameReq) Reset()         { *m = GetTeamByNameReq{} }
func (m *GetTeamByNameReq) String() string { return proto.CompactTextString(m) }
func (*GetTeamByNameReq) ProtoMessage()    {}
func (*GetTeamByNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{19}
}

func (m *GetTeamByNameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamByNameReq.Unmarshal(m, b)
}
func (m *GetTeamByNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamByNameReq.Marshal(b, m, deterministic)
}
func (m *GetTeamByNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamByNameReq.Merge(m, src)
}
func (m *GetTeamByNameReq) XXX_Size() int {
	return xxx_messageInfo_GetTeamByNameReq.Size(m)
}
func (m *GetTeamByNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamByNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamByNameReq proto.InternalMessageInfo

func (m *GetTeamByNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTeamByNameResp struct {
	Team                 *Team    `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetTeamByNameResp) Reset()         { *m = GetTeamByNameResp{} }
func (m *GetTeamByNameResp) String() string { return proto.CompactTextString(m) }
func (*GetTeamByNameResp) ProtoMessage()    {}
func (*GetTeamByNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{20}
}

func (m *GetTeamByNameResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTeamByNameResp.Unmarshal(m, b)
}
func (m *GetTeamByNameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTeamByNameResp.Marshal(b, m, deterministic)
}
func (m *GetTeamByNameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamByNameResp.Merge(m, src)
}
func (m *GetTeamByNameResp) XXX_Size() int {
	return xxx_messageInfo_GetTeamByNameResp.Size(m)
}
func (m *GetTeamByNameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamByNameResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamByNameResp proto.InternalMessageInfo

func (m *GetTeamByNameResp) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type GetUsersReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetUsersReq) Reset()         { *m = GetUsersReq{} }
func (m *GetUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetUsersReq) ProtoMessage()    {}
func (*GetUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{21}
}

func (m *GetUsersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersReq.Unmarshal(m, b)
}
func (m *GetUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersReq.Marshal(b, m, deterministic)
}
func (m *GetUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersReq.Merge(m, src)
}
func (m *GetUsersReq) XXX_Size() int {
	return xxx_messageInfo_GetUsersReq.Size(m)
}
func (m *GetUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersReq proto.InternalMessageInfo

func (m *GetUsersReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetUsersResp struct {
	UserIds              []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetUsersResp) Reset()         { *m = GetUsersResp{} }
func (m *GetUsersResp) String() string { return proto.CompactTextString(m) }
func (*GetUsersResp) ProtoMessage()    {}
func (*GetUsersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02a794f3710fe43, []int{22}
}

func (m *GetUsersResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersResp.Unmarshal(m, b)
}
func (m *GetUsersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersResp.Marshal(b, m, deterministic)
}
func (m *GetUsersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersResp.Merge(m, src)
}
func (m *GetUsersResp) XXX_Size() int {
	return xxx_messageInfo_GetUsersResp.Size(m)
}
func (m *GetUsersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersResp proto.InternalMessageInfo

func (m *GetUsersResp) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTeamReq)(nil), "chef.automate.domain.teams.v1.CreateTeamReq")
	proto.RegisterType((*CreateTeamResp)(nil), "chef.automate.domain.teams.v1.CreateTeamResp")
	proto.RegisterType((*UpdateTeamReq)(nil), "chef.automate.domain.teams.v1.UpdateTeamReq")
	proto.RegisterType((*UpdateTeamResp)(nil), "chef.automate.domain.teams.v1.UpdateTeamResp")
	proto.RegisterType((*DeleteTeamReq)(nil), "chef.automate.domain.teams.v1.DeleteTeamReq")
	proto.RegisterType((*DeleteTeamResp)(nil), "chef.automate.domain.teams.v1.DeleteTeamResp")
	proto.RegisterType((*GetTeamsReq)(nil), "chef.automate.domain.teams.v1.GetTeamsReq")
	proto.RegisterType((*GetTeamsResp)(nil), "chef.automate.domain.teams.v1.GetTeamsResp")
	proto.RegisterType((*GetTeamReq)(nil), "chef.automate.domain.teams.v1.GetTeamReq")
	proto.RegisterType((*GetTeamResp)(nil), "chef.automate.domain.teams.v1.GetTeamResp")
	proto.RegisterType((*Team)(nil), "chef.automate.domain.teams.v1.Team")
	proto.RegisterType((*AddUsersReq)(nil), "chef.automate.domain.teams.v1.AddUsersReq")
	proto.RegisterType((*AddUsersResp)(nil), "chef.automate.domain.teams.v1.AddUsersResp")
	proto.RegisterType((*RemoveUsersReq)(nil), "chef.automate.domain.teams.v1.RemoveUsersReq")
	proto.RegisterType((*RemoveUsersResp)(nil), "chef.automate.domain.teams.v1.RemoveUsersResp")
	proto.RegisterType((*PurgeUserMembershipReq)(nil), "chef.automate.domain.teams.v1.PurgeUserMembershipReq")
	proto.RegisterType((*PurgeUserMembershipResp)(nil), "chef.automate.domain.teams.v1.PurgeUserMembershipResp")
	proto.RegisterType((*GetTeamsForUserReq)(nil), "chef.automate.domain.teams.v1.GetTeamsForUserReq")
	proto.RegisterType((*GetTeamsForUserResp)(nil), "chef.automate.domain.teams.v1.GetTeamsForUserResp")
	proto.RegisterType((*GetTeamByNameReq)(nil), "chef.automate.domain.teams.v1.GetTeamByNameReq")
	proto.RegisterType((*GetTeamByNameResp)(nil), "chef.automate.domain.teams.v1.GetTeamByNameResp")
	proto.RegisterType((*GetUsersReq)(nil), "chef.automate.domain.teams.v1.GetUsersReq")
	proto.RegisterType((*GetUsersResp)(nil), "chef.automate.domain.teams.v1.GetUsersResp")
}

func init() {
	proto.RegisterFile("api/interservice/teams/v1/teams.proto", fileDescriptor_f02a794f3710fe43)
}

var fileDescriptor_f02a794f3710fe43 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x4e, 0xdb, 0x4c,
	0x10, 0x55, 0x12, 0x3e, 0x02, 0x13, 0x02, 0x7c, 0x8b, 0x54, 0x52, 0x0b, 0xd4, 0xc8, 0x55, 0x2b,
	0x7e, 0x8a, 0xdd, 0xa4, 0xf4, 0x4f, 0xbd, 0x2a, 0x6d, 0x41, 0xa9, 0x68, 0x85, 0xa2, 0xc2, 0x45,
	0x6f, 0x5a, 0x13, 0x0f, 0x61, 0xa5, 0xd8, 0xde, 0xec, 0x3a, 0x11, 0xbd, 0xef, 0x0b, 0xf5, 0x0d,
	0xab, 0x5d, 0x3b, 0xb1, 0x1d, 0x12, 0xec, 0xe0, 0x5e, 0x65, 0x77, 0x33, 0x67, 0xce, 0x99, 0xd9,
	0xf1, 0xb1, 0xe1, 0x89, 0xc5, 0xa8, 0x49, 0x5d, 0x1f, 0xb9, 0x40, 0x3e, 0xa4, 0x1d, 0x34, 0x7d,
	0xb4, 0x1c, 0x61, 0x0e, 0x1b, 0xc1, 0xc2, 0x60, 0xdc, 0xf3, 0x3d, 0xb2, 0xdd, 0xb9, 0xc6, 0x2b,
	0xc3, 0x1a, 0xf8, 0x9e, 0x63, 0xf9, 0x68, 0xd8, 0x9e, 0x63, 0x51, 0xd7, 0x08, 0x22, 0x86, 0x0d,
	0x6d, 0xab, 0xeb, 0x79, 0xdd, 0x1e, 0x9a, 0x32, 0x99, 0xe5, 0xba, 0x9e, 0x6f, 0xf9, 0xd4, 0x73,
	0x43, 0xb0, 0xb6, 0x2b, 0x8f, 0xf1, 0xc6, 0x47, 0xee, 0x5a, 0x3d, 0xb3, 0xe3, 0x39, 0x8e, 0xe7,
	0x9a, 0x43, 0xe4, 0x82, 0x46, 0xbf, 0x41, 0xa8, 0xfe, 0x09, 0xaa, 0x1f, 0x38, 0x5a, 0x3e, 0x7e,
	0x43, 0xcb, 0x69, 0x63, 0x9f, 0x10, 0x58, 0x70, 0x2d, 0x07, 0x6b, 0x85, 0x7a, 0x61, 0x67, 0xb9,
	0xad, 0xd6, 0xa4, 0x0e, 0x15, 0x1b, 0x45, 0x87, 0x53, 0x26, 0x59, 0x6a, 0x45, 0xf5, 0x57, 0xfc,
	0x48, 0x6f, 0xc1, 0x6a, 0x3c, 0x8d, 0x60, 0xe4, 0x35, 0x2c, 0x48, 0xb5, 0x2a, 0x4f, 0xa5, 0xf9,
	0xd8, 0xb8, 0xb3, 0x1e, 0x43, 0xc1, 0x14, 0x40, 0x3f, 0x87, 0xea, 0x39, 0xb3, 0x63, 0x8a, 0x56,
	0xa1, 0x48, 0xed, 0x50, 0x4f, 0x91, 0xda, 0x63, 0x85, 0xc5, 0xd9, 0x0a, 0x4b, 0x53, 0x15, 0xc6,
	0xd3, 0xe6, 0x51, 0xf8, 0x08, 0xaa, 0x1f, 0xb1, 0x87, 0x33, 0x15, 0x4a, 0xae, 0x78, 0x40, 0x1e,
	0xae, 0x2a, 0x54, 0x4e, 0xd0, 0x97, 0x07, 0xa2, 0x8d, 0x7d, 0xbd, 0x05, 0x2b, 0xd1, 0x56, 0x30,
	0xf2, 0x16, 0xfe, 0x53, 0xa8, 0x5a, 0xa1, 0x5e, 0xca, 0x9a, 0x38, 0x40, 0xe8, 0x5b, 0x00, 0x61,
	0xaa, 0x69, 0x25, 0x1c, 0x8f, 0x79, 0xf3, 0xe9, 0x3f, 0x85, 0x05, 0xb9, 0xfb, 0x47, 0x97, 0xf8,
	0x06, 0x2a, 0xef, 0x6d, 0xfb, 0x5c, 0x20, 0x17, 0xd3, 0x26, 0xe3, 0x21, 0x2c, 0x0d, 0x04, 0xf2,
	0x1f, 0xd4, 0x16, 0xb5, 0x62, 0xbd, 0xb4, 0xb3, 0xdc, 0x2e, 0xcb, 0x7d, 0xcb, 0x16, 0xfa, 0x09,
	0xac, 0x44, 0xc8, 0x3c, 0x05, 0xbd, 0x83, 0xd5, 0x36, 0x3a, 0xde, 0x10, 0xef, 0xa3, 0xe2, 0x33,
	0xac, 0x25, 0xc0, 0x79, 0x84, 0x34, 0xe0, 0xc1, 0xd9, 0x80, 0x77, 0x55, 0xaa, 0x2f, 0xe8, 0x5c,
	0x22, 0x17, 0xd7, 0x94, 0x49, 0x41, 0x9b, 0x50, 0x0e, 0x05, 0x84, 0xaa, 0x16, 0x03, 0x7e, 0x7d,
	0x1f, 0x36, 0xa7, 0x42, 0x04, 0x23, 0xeb, 0x50, 0x92, 0x7a, 0x0b, 0x4a, 0xaf, 0x5c, 0xea, 0x07,
	0x40, 0x46, 0xa3, 0x76, 0xec, 0x71, 0x09, 0xb9, 0x33, 0xf7, 0x19, 0x6c, 0xdc, 0x0a, 0xcf, 0x37,
	0xa0, 0x4f, 0x61, 0x3d, 0xcc, 0x78, 0xf4, 0xeb, 0xab, 0xe5, 0xe0, 0x0c, 0x77, 0xd2, 0x4f, 0xe1,
	0xff, 0x89, 0xb8, 0x3c, 0x6d, 0xdd, 0x56, 0x83, 0x3f, 0xeb, 0x72, 0xf5, 0x5d, 0xf5, 0x00, 0x46,
	0xd7, 0x17, 0xbf, 0xec, 0x42, 0xe2, 0xb2, 0x9b, 0x7f, 0x00, 0xca, 0xaa, 0x1f, 0x17, 0x0d, 0xd2,
	0x57, 0x0f, 0xdb, 0x45, 0x60, 0xbd, 0xe4, 0x70, 0x42, 0x8e, 0xc5, 0xa8, 0x11, 0xb8, 0xb4, 0x31,
	0x72, 0xe7, 0x30, 0xb4, 0xe5, 0x5e, 0x79, 0x6d, 0xec, 0x0f, 0x50, 0xf8, 0xda, 0xc1, 0x5c, 0x28,
	0x42, 0x01, 0x22, 0x4b, 0x26, 0xcf, 0x52, 0x3a, 0x90, 0x78, 0x09, 0xdc, 0xa2, 0xba, 0x2b, 0x5a,
	0x30, 0x49, 0x15, 0x79, 0x6b, 0x2a, 0x55, 0xc2, 0xdd, 0x53, 0xa9, 0x26, 0x4c, 0x9b, 0x02, 0x44,
	0xd6, 0x9a, 0x4a, 0x95, 0xb0, 0xe9, 0x54, 0xaa, 0x09, 0xcf, 0xee, 0xc0, 0xd2, 0x68, 0xa2, 0xc9,
	0x5e, 0x0a, 0x34, 0xe6, 0xd1, 0xda, 0x7e, 0xe6, 0x58, 0xc1, 0xc8, 0x4f, 0x28, 0x87, 0x7b, 0xb2,
	0x9b, 0x0d, 0x27, 0x29, 0xf6, 0xb2, 0x86, 0x06, 0x65, 0x8c, 0x9c, 0x2f, 0xb5, 0x8c, 0x98, 0xb9,
	0xa6, 0x96, 0x91, 0xb0, 0xd3, 0x1e, 0x54, 0x62, 0xc6, 0x46, 0xd2, 0x3a, 0x9d, 0x74, 0x50, 0xcd,
	0x98, 0x27, 0x5c, 0x30, 0x72, 0x03, 0x6b, 0x13, 0x5e, 0x43, 0x1a, 0x19, 0x9b, 0x1e, 0x59, 0x99,
	0xd6, 0x9c, 0x17, 0x32, 0x9e, 0x89, 0x6c, 0xcd, 0x8c, 0xd9, 0x48, 0x96, 0x99, 0x88, 0xca, 0xfb,
	0x5d, 0x80, 0x8d, 0x29, 0x3e, 0x4d, 0x5e, 0xa6, 0x24, 0x99, 0xfe, 0x3a, 0xd0, 0x5e, 0xdd, 0x07,
	0x26, 0x18, 0xe1, 0x50, 0x4d, 0xf8, 0x2a, 0x31, 0xb3, 0x35, 0x6c, 0xec, 0xd6, 0xda, 0xf3, 0xf9,
	0x00, 0x82, 0x1d, 0x1d, 0x7e, 0x6f, 0x76, 0xa9, 0x7f, 0x3d, 0xb8, 0x94, 0xce, 0x66, 0x4a, 0xb4,
	0x39, 0x42, 0x9b, 0x33, 0x3f, 0x9c, 0x2f, 0x17, 0xd5, 0xb7, 0xec, 0x8b, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0x6a, 0x91, 0x99, 0x5c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TeamsV1Client is the client API for TeamsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamsV1Client interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamResp, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamReq, opts ...grpc.CallOption) (*DeleteTeamResp, error)
	GetTeams(ctx context.Context, in *GetTeamsReq, opts ...grpc.CallOption) (*GetTeamsResp, error)
	GetTeam(ctx context.Context, in *GetTeamReq, opts ...grpc.CallOption) (*GetTeamResp, error)
	AddUsers(ctx context.Context, in *AddUsersReq, opts ...grpc.CallOption) (*AddUsersResp, error)
	RemoveUsers(ctx context.Context, in *RemoveUsersReq, opts ...grpc.CallOption) (*RemoveUsersResp, error)
	GetTeamsForUser(ctx context.Context, in *GetTeamsForUserReq, opts ...grpc.CallOption) (*GetTeamsForUserResp, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error)
	// Domain-specific functions not used in gateway API.
	// TODO (tc) We should add V2 versions if we wanna deprecate this GRPC service.
	// We'll also need to update any domain-service that uses these functions / this service
	// to use the V2 service.
	PurgeUserMembership(ctx context.Context, in *PurgeUserMembershipReq, opts ...grpc.CallOption) (*PurgeUserMembershipResp, error)
	GetTeamByName(ctx context.Context, in *GetTeamByNameReq, opts ...grpc.CallOption) (*GetTeamByNameResp, error)
}

type teamsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTeamsV1Client(cc grpc.ClientConnInterface) TeamsV1Client {
	return &teamsV1Client{cc}
}

func (c *teamsV1Client) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error) {
	out := new(CreateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamResp, error) {
	out := new(UpdateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) DeleteTeam(ctx context.Context, in *DeleteTeamReq, opts ...grpc.CallOption) (*DeleteTeamResp, error) {
	out := new(DeleteTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeams(ctx context.Context, in *GetTeamsReq, opts ...grpc.CallOption) (*GetTeamsResp, error) {
	out := new(GetTeamsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeam(ctx context.Context, in *GetTeamReq, opts ...grpc.CallOption) (*GetTeamResp, error) {
	out := new(GetTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) AddUsers(ctx context.Context, in *AddUsersReq, opts ...grpc.CallOption) (*AddUsersResp, error) {
	out := new(AddUsersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/AddUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) RemoveUsers(ctx context.Context, in *RemoveUsersReq, opts ...grpc.CallOption) (*RemoveUsersResp, error) {
	out := new(RemoveUsersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/RemoveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeamsForUser(ctx context.Context, in *GetTeamsForUserReq, opts ...grpc.CallOption) (*GetTeamsForUserResp, error) {
	out := new(GetTeamsForUserResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetTeamsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersResp, error) {
	out := new(GetUsersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) PurgeUserMembership(ctx context.Context, in *PurgeUserMembershipReq, opts ...grpc.CallOption) (*PurgeUserMembershipResp, error) {
	out := new(PurgeUserMembershipResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/PurgeUserMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeamByName(ctx context.Context, in *GetTeamByNameReq, opts ...grpc.CallOption) (*GetTeamByNameResp, error) {
	out := new(GetTeamByNameResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.v1.TeamsV1/GetTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsV1Server is the server API for TeamsV1 service.
type TeamsV1Server interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error)
	UpdateTeam(context.Context, *UpdateTeamReq) (*UpdateTeamResp, error)
	DeleteTeam(context.Context, *DeleteTeamReq) (*DeleteTeamResp, error)
	GetTeams(context.Context, *GetTeamsReq) (*GetTeamsResp, error)
	GetTeam(context.Context, *GetTeamReq) (*GetTeamResp, error)
	AddUsers(context.Context, *AddUsersReq) (*AddUsersResp, error)
	RemoveUsers(context.Context, *RemoveUsersReq) (*RemoveUsersResp, error)
	GetTeamsForUser(context.Context, *GetTeamsForUserReq) (*GetTeamsForUserResp, error)
	GetUsers(context.Context, *GetUsersReq) (*GetUsersResp, error)
	// Domain-specific functions not used in gateway API.
	// TODO (tc) We should add V2 versions if we wanna deprecate this GRPC service.
	// We'll also need to update any domain-service that uses these functions / this service
	// to use the V2 service.
	PurgeUserMembership(context.Context, *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error)
	GetTeamByName(context.Context, *GetTeamByNameReq) (*GetTeamByNameResp, error)
}

// UnimplementedTeamsV1Server can be embedded to have forward compatible implementations.
type UnimplementedTeamsV1Server struct {
}

func (*UnimplementedTeamsV1Server) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedTeamsV1Server) CreateTeam(ctx context.Context, req *CreateTeamReq) (*CreateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedTeamsV1Server) UpdateTeam(ctx context.Context, req *UpdateTeamReq) (*UpdateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedTeamsV1Server) DeleteTeam(ctx context.Context, req *DeleteTeamReq) (*DeleteTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeams(ctx context.Context, req *GetTeamsReq) (*GetTeamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeam(ctx context.Context, req *GetTeamReq) (*GetTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedTeamsV1Server) AddUsers(ctx context.Context, req *AddUsersReq) (*AddUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (*UnimplementedTeamsV1Server) RemoveUsers(ctx context.Context, req *RemoveUsersReq) (*RemoveUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsers not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeamsForUser(ctx context.Context, req *GetTeamsForUserReq) (*GetTeamsForUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsForUser not implemented")
}
func (*UnimplementedTeamsV1Server) GetUsers(ctx context.Context, req *GetUsersReq) (*GetUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedTeamsV1Server) PurgeUserMembership(ctx context.Context, req *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserMembership not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeamByName(ctx context.Context, req *GetTeamByNameReq) (*GetTeamByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}

func RegisterTeamsV1Server(s *grpc.Server, srv TeamsV1Server) {
	s.RegisterService(&_TeamsV1_serviceDesc, srv)
}

func _TeamsV1_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).CreateTeam(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).UpdateTeam(ctx, req.(*UpdateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).DeleteTeam(ctx, req.(*DeleteTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeams(ctx, req.(*GetTeamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeam(ctx, req.(*GetTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/AddUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).AddUsers(ctx, req.(*AddUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_RemoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).RemoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/RemoveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).RemoveUsers(ctx, req.(*RemoveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeamsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeamsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetTeamsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeamsForUser(ctx, req.(*GetTeamsForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_PurgeUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeUserMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).PurgeUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/PurgeUserMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).PurgeUserMembership(ctx, req.(*PurgeUserMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.v1.TeamsV1/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeamByName(ctx, req.(*GetTeamByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.teams.v1.TeamsV1",
	HandlerType: (*TeamsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _TeamsV1_GetVersion_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _TeamsV1_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _TeamsV1_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _TeamsV1_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _TeamsV1_GetTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _TeamsV1_GetTeam_Handler,
		},
		{
			MethodName: "AddUsers",
			Handler:    _TeamsV1_AddUsers_Handler,
		},
		{
			MethodName: "RemoveUsers",
			Handler:    _TeamsV1_RemoveUsers_Handler,
		},
		{
			MethodName: "GetTeamsForUser",
			Handler:    _TeamsV1_GetTeamsForUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _TeamsV1_GetUsers_Handler,
		},
		{
			MethodName: "PurgeUserMembership",
			Handler:    _TeamsV1_PurgeUserMembership_Handler,
		},
		{
			MethodName: "GetTeamByName",
			Handler:    _TeamsV1_GetTeamByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interservice/teams/v1/teams.proto",
}
