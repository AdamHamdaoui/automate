// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.
// source: api/interservice/teams/v1/teams.proto

package v1

import (
	"context"

	version "github.com/chef/automate/api/external/common/version"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// verify that the mock satisfies the TeamsV1Server interface (at compile time)
var _ TeamsV1Server = &TeamsV1ServerMock{}

// NewTeamsV1ServerMock gives you a fresh instance of TeamsV1ServerMock.
func NewTeamsV1ServerMock() *TeamsV1ServerMock {
	return &TeamsV1ServerMock{validateRequests: true}
}

// NewTeamsV1ServerMockWithoutValidation gives you a fresh instance of
// TeamsV1ServerMock which does not attempt to validate requests before passing
// them to their respective '*Func'.
func NewTeamsV1ServerMockWithoutValidation() *TeamsV1ServerMock {
	return &TeamsV1ServerMock{}
}

// TeamsV1ServerMock is the mock-what-you-want struct that stubs all not-overridden
// methods with "not implemented" returns
type TeamsV1ServerMock struct {
	validateRequests        bool
	GetVersionFunc          func(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	CreateTeamFunc          func(context.Context, *CreateTeamReq) (*CreateTeamResp, error)
	UpdateTeamFunc          func(context.Context, *UpdateTeamReq) (*UpdateTeamResp, error)
	DeleteTeamFunc          func(context.Context, *DeleteTeamReq) (*DeleteTeamResp, error)
	GetTeamsFunc            func(context.Context, *GetTeamsReq) (*GetTeamsResp, error)
	GetTeamFunc             func(context.Context, *GetTeamReq) (*GetTeamResp, error)
	AddUsersFunc            func(context.Context, *AddUsersReq) (*AddUsersResp, error)
	RemoveUsersFunc         func(context.Context, *RemoveUsersReq) (*RemoveUsersResp, error)
	GetTeamsForUserFunc     func(context.Context, *GetTeamsForUserReq) (*GetTeamsForUserResp, error)
	GetUsersFunc            func(context.Context, *GetUsersReq) (*GetUsersResp, error)
	PurgeUserMembershipFunc func(context.Context, *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error)
	GetTeamByNameFunc       func(context.Context, *GetTeamByNameReq) (*GetTeamByNameResp, error)
}

func (m *TeamsV1ServerMock) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetVersionFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetVersion' not implemented")
}

func (m *TeamsV1ServerMock) CreateTeam(ctx context.Context, req *CreateTeamReq) (*CreateTeamResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.CreateTeamFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'CreateTeam' not implemented")
}

func (m *TeamsV1ServerMock) UpdateTeam(ctx context.Context, req *UpdateTeamReq) (*UpdateTeamResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.UpdateTeamFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'UpdateTeam' not implemented")
}

func (m *TeamsV1ServerMock) DeleteTeam(ctx context.Context, req *DeleteTeamReq) (*DeleteTeamResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteTeamFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteTeam' not implemented")
}

func (m *TeamsV1ServerMock) GetTeams(ctx context.Context, req *GetTeamsReq) (*GetTeamsResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetTeamsFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetTeams' not implemented")
}

func (m *TeamsV1ServerMock) GetTeam(ctx context.Context, req *GetTeamReq) (*GetTeamResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetTeamFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetTeam' not implemented")
}

func (m *TeamsV1ServerMock) AddUsers(ctx context.Context, req *AddUsersReq) (*AddUsersResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.AddUsersFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'AddUsers' not implemented")
}

func (m *TeamsV1ServerMock) RemoveUsers(ctx context.Context, req *RemoveUsersReq) (*RemoveUsersResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.RemoveUsersFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'RemoveUsers' not implemented")
}

func (m *TeamsV1ServerMock) GetTeamsForUser(ctx context.Context, req *GetTeamsForUserReq) (*GetTeamsForUserResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetTeamsForUserFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetTeamsForUser' not implemented")
}

func (m *TeamsV1ServerMock) GetUsers(ctx context.Context, req *GetUsersReq) (*GetUsersResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetUsersFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetUsers' not implemented")
}

func (m *TeamsV1ServerMock) PurgeUserMembership(ctx context.Context, req *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.PurgeUserMembershipFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'PurgeUserMembership' not implemented")
}

func (m *TeamsV1ServerMock) GetTeamByName(ctx context.Context, req *GetTeamByNameReq) (*GetTeamByNameResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetTeamByNameFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetTeamByName' not implemented")
}

// Reset resets all overridden functions
func (m *TeamsV1ServerMock) Reset() {
	m.GetVersionFunc = nil
	m.CreateTeamFunc = nil
	m.UpdateTeamFunc = nil
	m.DeleteTeamFunc = nil
	m.GetTeamsFunc = nil
	m.GetTeamFunc = nil
	m.AddUsersFunc = nil
	m.RemoveUsersFunc = nil
	m.GetTeamsForUserFunc = nil
	m.GetUsersFunc = nil
	m.PurgeUserMembershipFunc = nil
	m.GetTeamByNameFunc = nil
}
