syntax = "proto3";

package chef.automate.domain.data_lifecycle;
option go_package = "github.com/chef/automate/api/interservice/data_lifecycle";

import "api/interservice/data_lifecycle/manageable.proto";

///
// Health check and server metadata messages and responses
///

message VersionRequest {
}

message VersionResponse {
  string version  = 1;
}

message TriggerPurgeRequest {
  // Id is a uuid to reference this request. A request with
  // an existing id may reuse the result of the already triggered
  // purge request.
  string id = 1;

  // Optional service_name. If provided, the purge will be restricted to this service
  string service_name = 2;
}

message TriggerPurgeResponse {
  // The response returned by each service
  map<string, PurgeResponse> responses = 1;
}

service DataLifecycle {
  // Health checks and metadata
  rpc Version(VersionRequest) returns (VersionResponse);

  rpc TriggerPurge(TriggerPurgeRequest) returns (TriggerPurgeResponse);
}
