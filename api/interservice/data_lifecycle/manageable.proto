syntax = "proto3";

package chef.automate.domain.data_lifecycle;
option go_package = "github.com/chef/automate/api/interservice/data_lifecycle";

message PurgeRequest {
  // This id must be managed. If a request with a duplicate id comes in,
  // the down stream service should prefer waiting for that id to complete
  // rather than redoing the work.
  string id = 1;
}

message PurgeResponse {
  string id = 1;

  map<string, PurgeStatus> component_status = 2;
}

message PurgeStatus {
  enum StatusCode {
    FAILED = 0;
    SUCCESS = 1;
  }

  StatusCode status = 1;
  string msg = 2;
}

service DataLifecycleManageable {
  // We could make this streaming and return how much is
  // finished
  rpc Purge(PurgeRequest) returns (PurgeResponse);
}
