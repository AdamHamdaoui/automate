syntax = "proto3";
package chef.automate.domain.ingest;
option go_package = "github.com/chef/automate/api/interservice/ingest";
import "google/api/annotations.proto";
import "api/external/ingest/request/chef.proto";
import "api/external/ingest/request/action.proto";
import "api/external/ingest/request/liveness.proto";
import "api/external/ingest/response/chef.proto";
import "api/external/ingest/response/action.proto";
import "api/external/ingest/response/liveness.proto";
// Version message
//
// The ingest-service version constructed with:
// * Service name
// * Built time
// * Semantic version
// * Git SHA
message Version {
  string version = 2;
  string built = 1;
  string name = 3;
  string sha = 4;
}
message VersionRequest {
}
service ChefIngester {
  rpc ProcessChefRun ( chef.automate.api.ingest.request.Run ) returns ( chef.automate.api.ingest.response.ProcessChefRunResponse ) {
    option (google.api.http) = { post:"/events/chef/run" body:"*" };
  }
  rpc ProcessChefAction ( chef.automate.api.ingest.request.Action ) returns ( chef.automate.api.ingest.response.ProcessChefActionResponse ) {
    option (google.api.http) = { post:"/events/chef/action" body:"*" };
  }
  rpc ProcessLivenessPing ( chef.automate.api.ingest.request.Liveness ) returns ( chef.automate.api.ingest.response.ProcessLivenessResponse ) {
    option (google.api.http) = { post:"/events/chef/liveness" body:"*" };
  }
  rpc ProcessMultipleNodeDeletes ( chef.automate.api.ingest.request.MultipleNodeDeleteRequest ) returns ( chef.automate.api.ingest.response.ProcessMultipleNodeDeleteResponse );
  rpc ProcessNodeDelete ( chef.automate.api.ingest.request.Delete ) returns ( chef.automate.api.ingest.response.ProcessNodeDeleteResponse ) {
    option (google.api.http) = { post:"/events/chef/nodedelete" body:"*" };
  }
  rpc GetVersion ( VersionRequest ) returns ( Version ) {
    option (google.api.http) = { get:"/ingest/version" };
  }
}
