// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.
// source: api/interservice/authz/common/subject_purge.proto

package common

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// verify that the mock satisfies the SubjectPurgeServer interface (at compile time)
var _ SubjectPurgeServer = &SubjectPurgeServerMock{}

// NewSubjectPurgeServerMock gives you a fresh instance of SubjectPurgeServerMock.
func NewSubjectPurgeServerMock() *SubjectPurgeServerMock {
	return &SubjectPurgeServerMock{validateRequests: true}
}

// NewSubjectPurgeServerMockWithoutValidation gives you a fresh instance of
// SubjectPurgeServerMock which does not attempt to validate requests before passing
// them to their respective '*Func'.
func NewSubjectPurgeServerMockWithoutValidation() *SubjectPurgeServerMock {
	return &SubjectPurgeServerMock{}
}

// SubjectPurgeServerMock is the mock-what-you-want struct that stubs all not-overridden
// methods with "not implemented" returns
type SubjectPurgeServerMock struct {
	validateRequests             bool
	PurgeSubjectFromPoliciesFunc func(context.Context, *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error)
}

func (m *SubjectPurgeServerMock) PurgeSubjectFromPolicies(ctx context.Context, req *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.PurgeSubjectFromPoliciesFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'PurgeSubjectFromPolicies' not implemented")
}

// Reset resets all overridden functions
func (m *SubjectPurgeServerMock) Reset() {
	m.PurgeSubjectFromPoliciesFunc = nil
}
