// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/ingest/chef.proto

package ingest

import (
	context "context"
	fmt "fmt"
	version "github.com/chef/automate/api/external/common/version"
	request "github.com/chef/automate/api/external/ingest/request"
	response "github.com/chef/automate/api/external/ingest/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/external/ingest/chef.proto", fileDescriptor_920646edf89f77d6)
}

var fileDescriptor_920646edf89f77d6 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x8a, 0xd3, 0x40,
	0x18, 0xc0, 0x89, 0x07, 0x0f, 0xc3, 0xb2, 0xb2, 0xb3, 0xa8, 0x31, 0x94, 0x5d, 0x4c, 0xd1, 0xdd,
	0x56, 0x93, 0x80, 0x2b, 0x82, 0xd1, 0x83, 0x7f, 0x16, 0x64, 0x41, 0x97, 0xd2, 0x83, 0x07, 0x15,
	0x24, 0x9b, 0x7e, 0x4d, 0x07, 0x92, 0x99, 0x38, 0x33, 0x29, 0x16, 0xf1, 0xe2, 0xb1, 0x57, 0x1f,
	0xc3, 0x73, 0x1f, 0xc0, 0x07, 0x10, 0x04, 0x5f, 0x61, 0x1f, 0xc3, 0x83, 0x24, 0x33, 0xd9, 0x36,
	0x6b, 0x9a, 0xb6, 0xa7, 0xb6, 0x93, 0xdf, 0xf7, 0xe7, 0xd7, 0x2f, 0xf3, 0xa1, 0xbd, 0x20, 0x25,
	0x1e, 0x7c, 0x96, 0xc0, 0x69, 0x10, 0x7b, 0x84, 0x46, 0x20, 0xa4, 0x17, 0x8e, 0x60, 0xe8, 0xa6,
	0x9c, 0x49, 0x86, 0xcd, 0xe2, 0x7b, 0x90, 0x49, 0x96, 0x04, 0x12, 0xdc, 0x20, 0x25, 0xae, 0x82,
	0xac, 0x56, 0xc4, 0x58, 0x14, 0x83, 0x97, 0x27, 0x08, 0x28, 0x65, 0x32, 0x90, 0x84, 0x51, 0xa1,
	0xe2, 0xac, 0x67, 0x21, 0x4b, 0x52, 0x46, 0x81, 0x4a, 0xe1, 0x95, 0xd1, 0x4e, 0xc4, 0xd3, 0xd0,
	0x2b, 0x9e, 0x87, 0x4e, 0x04, 0xd4, 0x49, 0x59, 0x4c, 0xc2, 0x89, 0x47, 0x82, 0xa4, 0x26, 0x43,
	0xa7, 0xd2, 0x59, 0xc8, 0x92, 0x84, 0x51, 0x6f, 0x0c, 0x5c, 0x90, 0xf9, 0xa7, 0x46, 0xef, 0xd6,
	0x49, 0x70, 0xf8, 0x94, 0x55, 0x65, 0xac, 0xc3, 0x26, 0x2e, 0x08, 0xe5, 0x3c, 0x63, 0xb7, 0x89,
	0x8c, 0xc9, 0x18, 0x28, 0x88, 0xb2, 0xd1, 0x83, 0x7a, 0x56, 0xa4, 0x8c, 0x0a, 0x58, 0x2c, 0xdf,
	0x69, 0x04, 0x2b, 0xf5, 0xef, 0x35, 0xa2, 0xd5, 0x06, 0x1e, 0xfc, 0x40, 0x68, 0xeb, 0xe5, 0x08,
	0x86, 0x27, 0x05, 0x06, 0x1c, 0xff, 0x36, 0xd0, 0x76, 0x8f, 0xb3, 0x10, 0x84, 0xc8, 0xcf, 0xfb,
	0x19, 0xc5, 0x77, 0xdc, 0x65, 0x83, 0x74, 0xb5, 0x96, 0xdb, 0xcf, 0xa8, 0xf5, 0xb8, 0x09, 0x53,
	0xd5, 0xdd, 0x6a, 0xe6, 0xbe, 0x3e, 0xb6, 0x3f, 0x4c, 0x67, 0xe6, 0x23, 0xb4, 0xaf, 0x68, 0x9f,
	0xb2, 0x01, 0x08, 0xff, 0x0b, 0x50, 0x49, 0xe4, 0xe4, 0x63, 0x96, 0x91, 0xc1, 0x57, 0x9f, 0x67,
	0x54, 0xe0, 0xdd, 0x0a, 0x10, 0x72, 0x08, 0x24, 0x7c, 0xfb, 0x73, 0xfe, 0xfd, 0x4a, 0xcb, 0xbe,
	0x59, 0x8a, 0xc2, 0xb8, 0x78, 0x6f, 0xf2, 0x56, 0x3c, 0x9e, 0x51, 0xdf, 0xe8, 0xe2, 0x5f, 0x06,
	0xda, 0x59, 0x28, 0xfc, 0xbc, 0xf8, 0xb3, 0xf0, 0xe1, 0x6a, 0x2b, 0x45, 0x5a, 0x4f, 0x37, 0x13,
	0x53, 0x51, 0x17, 0x6e, 0xbd, 0xe9, 0xcc, 0x3c, 0x40, 0xdb, 0xba, 0x75, 0x35, 0x29, 0x81, 0xaf,
	0x57, 0x7f, 0x2f, 0xca, 0xec, 0xdb, 0x56, 0x9d, 0x8c, 0x22, 0x2f, 0xf9, 0x9c, 0xb2, 0x01, 0x1c,
	0x43, 0x0c, 0x12, 0xd6, 0xf1, 0x51, 0xe4, 0x26, 0x3e, 0xf3, 0xfc, 0x15, 0x9f, 0x36, 0xda, 0x5a,
	0x1c, 0xc5, 0xa5, 0xc1, 0x0c, 0x8a, 0x80, 0xc2, 0xa5, 0x6d, 0xef, 0xd5, 0xb9, 0xe4, 0x9c, 0xa2,
	0x72, 0x9f, 0xbf, 0x06, 0xb2, 0x74, 0xbd, 0x37, 0x59, 0x2c, 0x49, 0x1a, 0xc3, 0xbc, 0xae, 0xc0,
	0x4f, 0x56, 0x8b, 0xfd, 0x1f, 0xd6, 0x57, 0x4f, 0xac, 0xe3, 0xf5, 0x5d, 0xeb, 0x92, 0x68, 0xe7,
	0xf7, 0x9b, 0x38, 0xbb, 0x76, 0x67, 0x99, 0xb3, 0x93, 0xe8, 0x1a, 0x8e, 0xe2, 0x45, 0xae, 0x7f,
	0x6e, 0xa0, 0x5d, 0xdd, 0xc2, 0x6b, 0x7d, 0x39, 0x7b, 0x84, 0x46, 0xb8, 0xbb, 0xda, 0xbb, 0xe4,
	0x2d, 0x7f, 0x7d, 0xcd, 0x32, 0xe6, 0x42, 0x0e, 0xa6, 0x33, 0xd3, 0x47, 0xed, 0x86, 0xcb, 0x57,
	0xee, 0x8c, 0xe5, 0x17, 0xf0, 0xb6, 0xdd, 0xaa, 0x73, 0x2e, 0x03, 0x73, 0xcd, 0x9f, 0x06, 0x42,
	0xaf, 0x40, 0xbe, 0x55, 0xdb, 0x17, 0x3f, 0xac, 0xe9, 0x58, 0x2d, 0x6a, 0xb7, 0x5c, 0xd0, 0x1a,
	0x3d, 0xa1, 0x43, 0x56, 0x8e, 0xd3, 0xd9, 0x28, 0xca, 0x3e, 0x9d, 0xce, 0xcc, 0x23, 0x74, 0x43,
	0x4c, 0x84, 0x84, 0xc4, 0x17, 0xc0, 0xc7, 0x24, 0x04, 0x5f, 0x93, 0xf8, 0x56, 0xf5, 0x5c, 0x07,
	0xfa, 0x11, 0xc8, 0xc2, 0x69, 0x07, 0x5f, 0x2b, 0x9d, 0x74, 0xc4, 0x0b, 0xf7, 0xdd, 0xfd, 0x88,
	0xc8, 0x51, 0x76, 0x96, 0x17, 0xd5, 0xd7, 0x52, 0xb7, 0xe2, 0xd5, 0x6c, 0xdd, 0xb3, 0xab, 0xc5,
	0x92, 0x3d, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x91, 0xba, 0xd9, 0x2a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChefIngesterClient is the client API for ChefIngester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChefIngesterClient interface {
	ProcessChefRun(ctx context.Context, in *request.Run, opts ...grpc.CallOption) (*response.ProcessChefRunResponse, error)
	ProcessChefAction(ctx context.Context, in *request.Action, opts ...grpc.CallOption) (*response.ProcessChefActionResponse, error)
	ProcessNodeDelete(ctx context.Context, in *request.Delete, opts ...grpc.CallOption) (*response.ProcessNodeDeleteResponse, error)
	ProcessMultipleNodeDeletes(ctx context.Context, in *request.MultipleNodeDeleteRequest, opts ...grpc.CallOption) (*response.ProcessMultipleNodeDeleteResponse, error)
	ProcessLivenessPing(ctx context.Context, in *request.Liveness, opts ...grpc.CallOption) (*response.ProcessLivenessResponse, error)
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
}

type chefIngesterClient struct {
	cc grpc.ClientConnInterface
}

func NewChefIngesterClient(cc grpc.ClientConnInterface) ChefIngesterClient {
	return &chefIngesterClient{cc}
}

func (c *chefIngesterClient) ProcessChefRun(ctx context.Context, in *request.Run, opts ...grpc.CallOption) (*response.ProcessChefRunResponse, error) {
	out := new(response.ProcessChefRunResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/ProcessChefRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chefIngesterClient) ProcessChefAction(ctx context.Context, in *request.Action, opts ...grpc.CallOption) (*response.ProcessChefActionResponse, error) {
	out := new(response.ProcessChefActionResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/ProcessChefAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chefIngesterClient) ProcessNodeDelete(ctx context.Context, in *request.Delete, opts ...grpc.CallOption) (*response.ProcessNodeDeleteResponse, error) {
	out := new(response.ProcessNodeDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/ProcessNodeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chefIngesterClient) ProcessMultipleNodeDeletes(ctx context.Context, in *request.MultipleNodeDeleteRequest, opts ...grpc.CallOption) (*response.ProcessMultipleNodeDeleteResponse, error) {
	out := new(response.ProcessMultipleNodeDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/ProcessMultipleNodeDeletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chefIngesterClient) ProcessLivenessPing(ctx context.Context, in *request.Liveness, opts ...grpc.CallOption) (*response.ProcessLivenessResponse, error) {
	out := new(response.ProcessLivenessResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/ProcessLivenessPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chefIngesterClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.ChefIngester/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChefIngesterServer is the server API for ChefIngester service.
type ChefIngesterServer interface {
	ProcessChefRun(context.Context, *request.Run) (*response.ProcessChefRunResponse, error)
	ProcessChefAction(context.Context, *request.Action) (*response.ProcessChefActionResponse, error)
	ProcessNodeDelete(context.Context, *request.Delete) (*response.ProcessNodeDeleteResponse, error)
	ProcessMultipleNodeDeletes(context.Context, *request.MultipleNodeDeleteRequest) (*response.ProcessMultipleNodeDeleteResponse, error)
	ProcessLivenessPing(context.Context, *request.Liveness) (*response.ProcessLivenessResponse, error)
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
}

// UnimplementedChefIngesterServer can be embedded to have forward compatible implementations.
type UnimplementedChefIngesterServer struct {
}

func (*UnimplementedChefIngesterServer) ProcessChefRun(ctx context.Context, req *request.Run) (*response.ProcessChefRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessChefRun not implemented")
}
func (*UnimplementedChefIngesterServer) ProcessChefAction(ctx context.Context, req *request.Action) (*response.ProcessChefActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessChefAction not implemented")
}
func (*UnimplementedChefIngesterServer) ProcessNodeDelete(ctx context.Context, req *request.Delete) (*response.ProcessNodeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNodeDelete not implemented")
}
func (*UnimplementedChefIngesterServer) ProcessMultipleNodeDeletes(ctx context.Context, req *request.MultipleNodeDeleteRequest) (*response.ProcessMultipleNodeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMultipleNodeDeletes not implemented")
}
func (*UnimplementedChefIngesterServer) ProcessLivenessPing(ctx context.Context, req *request.Liveness) (*response.ProcessLivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessLivenessPing not implemented")
}
func (*UnimplementedChefIngesterServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

func RegisterChefIngesterServer(s *grpc.Server, srv ChefIngesterServer) {
	s.RegisterService(&_ChefIngester_serviceDesc, srv)
}

func _ChefIngester_ProcessChefRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Run)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).ProcessChefRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/ProcessChefRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).ProcessChefRun(ctx, req.(*request.Run))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChefIngester_ProcessChefAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).ProcessChefAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/ProcessChefAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).ProcessChefAction(ctx, req.(*request.Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChefIngester_ProcessNodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Delete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).ProcessNodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/ProcessNodeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).ProcessNodeDelete(ctx, req.(*request.Delete))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChefIngester_ProcessMultipleNodeDeletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MultipleNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).ProcessMultipleNodeDeletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/ProcessMultipleNodeDeletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).ProcessMultipleNodeDeletes(ctx, req.(*request.MultipleNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChefIngester_ProcessLivenessPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Liveness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).ProcessLivenessPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/ProcessLivenessPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).ProcessLivenessPing(ctx, req.(*request.Liveness))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChefIngester_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChefIngesterServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.ChefIngester/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChefIngesterServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChefIngester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.ingest.ChefIngester",
	HandlerType: (*ChefIngesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessChefRun",
			Handler:    _ChefIngester_ProcessChefRun_Handler,
		},
		{
			MethodName: "ProcessChefAction",
			Handler:    _ChefIngester_ProcessChefAction_Handler,
		},
		{
			MethodName: "ProcessNodeDelete",
			Handler:    _ChefIngester_ProcessNodeDelete_Handler,
		},
		{
			MethodName: "ProcessMultipleNodeDeletes",
			Handler:    _ChefIngester_ProcessMultipleNodeDeletes_Handler,
		},
		{
			MethodName: "ProcessLivenessPing",
			Handler:    _ChefIngester_ProcessLivenessPing_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ChefIngester_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/ingest/chef.proto",
}
