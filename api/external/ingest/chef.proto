syntax = "proto3";
package chef.automate.api.ingest;
option go_package = "github.com/chef/automate/api/external/ingest";
import "google/api/annotations.proto";
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
import "api/external/common/version/version.proto";
import "api/external/ingest/request/chef.proto";
import "api/external/ingest/request/action.proto";
import "api/external/ingest/request/liveness.proto";
import "api/external/ingest/response/chef.proto";
import "api/external/ingest/response/action.proto";
import "api/external/ingest/response/liveness.proto";
service ChefIngester {
  rpc ProcessChefRun ( request.Run ) returns ( response.ProcessChefRunResponse ) {
    option (google.api.http) = { post:"/ingest/events/chef/run" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"ingest:nodes:{entity_uuid}:runs" action:"ingest:nodes:create" };
  }
  rpc ProcessChefAction ( request.Action ) returns ( response.ProcessChefActionResponse ) {
    option (google.api.http) = { post:"/ingest/events/chef/action" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"ingest:actions" action:"ingest:actions:create" };
  }
  rpc ProcessNodeDelete ( request.Delete ) returns ( response.ProcessNodeDeleteResponse ) {
    option (google.api.http) = { post:"/ingest/events/chef/nodedelete" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"ingest:nodes" action:"ingest:nodes:delete" };
  }
  rpc ProcessMultipleNodeDeletes ( request.MultipleNodeDeleteRequest ) returns ( response.ProcessMultipleNodeDeleteResponse ) {
    option (google.api.http) = { post:"/ingest/events/chef/node-multiple-deletes" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"ingest:nodes" action:"ingest:nodes:delete" };
  }
  rpc ProcessLivenessPing ( request.Liveness ) returns ( response.ProcessLivenessResponse ) {
    option (google.api.http) = { post:"/ingest/events/chef/liveness" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"ingest:nodes:{entity_uuid}:liveness" action:"ingest:nodes:create" };
  }
  rpc GetVersion ( chef.automate.api.common.version.VersionInfoRequest ) returns ( chef.automate.api.common.version.VersionInfo ) {
    option (google.api.http) = { get:"/ingest/version" };
    option (chef.automate.api.iam.policy) = { resource:"system:service:version" action:"system:serviceVersion:get" };
  }
}
