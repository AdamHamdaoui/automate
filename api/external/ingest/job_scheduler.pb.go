// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/ingest/job_scheduler.proto

package ingest

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/external/ingest/request"
	response "github.com/chef/automate/api/external/ingest/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/external/ingest/job_scheduler.proto", fileDescriptor_b7be91b7559e6b0f)
}

var fileDescriptor_b7be91b7559e6b0f = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x8b, 0xd4, 0x30,
	0x18, 0xc6, 0x99, 0x3d, 0x28, 0x14, 0x41, 0xa8, 0xa8, 0x63, 0x51, 0x0f, 0xc5, 0x3f, 0xcc, 0x62,
	0x13, 0x75, 0x11, 0x61, 0x4e, 0xeb, 0x1f, 0x14, 0x45, 0xbd, 0xec, 0x4d, 0x14, 0xc9, 0xa4, 0xef,
	0x64, 0x22, 0x6d, 0xde, 0x98, 0xbc, 0x05, 0xbd, 0x7a, 0xdc, 0xab, 0x7e, 0x95, 0xfd, 0x22, 0xfa,
	0x15, 0x04, 0xef, 0x82, 0x77, 0x99, 0x64, 0xb6, 0xab, 0xdb, 0xee, 0xac, 0x65, 0x8f, 0xcd, 0x9b,
	0xf7, 0x79, 0x9e, 0xdf, 0x43, 0x49, 0x72, 0x53, 0x58, 0xcd, 0xe1, 0x23, 0x81, 0x33, 0xa2, 0xe2,
	0xda, 0x28, 0xf0, 0xc4, 0xdf, 0xe3, 0xec, 0x9d, 0x97, 0x0b, 0x28, 0x9b, 0x0a, 0x1c, 0xb3, 0x0e,
	0x09, 0xd3, 0xb1, 0x5c, 0xc0, 0x9c, 0x89, 0x86, 0xb0, 0x16, 0x04, 0x4c, 0x58, 0xcd, 0xe2, 0xed,
	0xec, 0xb2, 0x42, 0x54, 0x15, 0xf0, 0xa5, 0x92, 0x30, 0x06, 0x49, 0x90, 0x46, 0xe3, 0xe3, 0x5e,
	0xb6, 0x2d, 0xb1, 0xb6, 0x68, 0xc0, 0x90, 0xe7, 0xfb, 0xdb, 0x85, 0x72, 0x56, 0xf2, 0x30, 0x97,
	0x85, 0x02, 0x53, 0x58, 0xac, 0xb4, 0xfc, 0xc4, 0xb5, 0xa8, 0x7b, 0x14, 0x6e, 0xf7, 0x45, 0x74,
	0xe0, 0x2d, 0x1a, 0x0f, 0x7d, 0x59, 0x33, 0xde, 0xbf, 0xf1, 0xa1, 0x39, 0x02, 0xee, 0xee, 0xcf,
	0xd3, 0xc9, 0x99, 0xe7, 0x38, 0xdb, 0xd9, 0x3f, 0x4e, 0xbf, 0x8d, 0x92, 0xf3, 0x4f, 0x81, 0x76,
	0x48, 0x50, 0xe3, 0xff, 0x99, 0xdc, 0x67, 0x47, 0x15, 0xc1, 0x56, 0x0e, 0xac, 0x77, 0x31, 0xbb,
	0xb7, 0x6e, 0x31, 0xc2, 0xb0, 0xbf, 0x17, 0xa2, 0x44, 0xfe, 0x6c, 0x77, 0x6f, 0x7c, 0x23, 0x39,
	0xeb, 0x80, 0xc0, 0x2c, 0x5b, 0x99, 0x1a, 0x2c, 0xc1, 0xa7, 0xe7, 0x0e, 0x1d, 0x4c, 0x15, 0xd0,
	0xe7, 0xef, 0x3f, 0xbe, 0x6c, 0x5c, 0x4a, 0x2f, 0xf2, 0x76, 0xc6, 0xc3, 0x8c, 0xfb, 0x20, 0x95,
	0xfe, 0x1e, 0x25, 0x57, 0x1f, 0xa1, 0x99, 0x6b, 0xd5, 0x38, 0x78, 0xb5, 0x9c, 0xbc, 0xd4, 0xde,
	0x6b, 0xa3, 0x0e, 0xe8, 0xee, 0x1c, 0x4f, 0xd7, 0x5e, 0x8e, 0x52, 0xd9, 0x83, 0xff, 0xe0, 0x5a,
	0xef, 0x9a, 0xbf, 0xdd, 0xdd, 0x1b, 0x4f, 0xba, 0x8c, 0x17, 0x0e, 0x33, 0x36, 0xb6, 0x14, 0x04,
	0x01, 0x73, 0x33, 0xbf, 0xde, 0xc1, 0xac, 0xa3, 0x6e, 0x11, 0xbf, 0x64, 0xf0, 0x9c, 0x8e, 0x36,
	0xd3, 0x5f, 0xa3, 0xe4, 0x4a, 0x9b, 0xe0, 0x31, 0x54, 0x40, 0x31, 0xc7, 0x89, 0xb0, 0xb7, 0x87,
	0x60, 0xf7, 0x99, 0xe6, 0x6f, 0x86, 0x53, 0x4f, 0xf2, 0x6b, 0x1d, 0xea, 0x32, 0x68, 0x77, 0xa0,
	0xbf, 0x6e, 0x24, 0x93, 0xd6, 0x7f, 0xd5, 0x78, 0x08, 0xf0, 0x04, 0x5d, 0x88, 0xa3, 0xd1, 0x9c,
	0xa8, 0x80, 0x17, 0x43, 0x0a, 0x38, 0x2e, 0x40, 0x3e, 0x1f, 0x5e, 0xc6, 0x56, 0xce, 0xd6, 0xff,
	0x02, 0x45, 0xb9, 0xb2, 0x39, 0xa8, 0xe5, 0x21, 0x7b, 0x7d, 0x4b, 0x69, 0x5a, 0x34, 0x33, 0x26,
	0xb1, 0xe6, 0x4b, 0x82, 0xf6, 0x55, 0xea, 0x7b, 0x35, 0x66, 0xa7, 0xc2, 0x03, 0xb1, 0xf5, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x09, 0xc7, 0xc0, 0xef, 0x28, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobSchedulerClient is the client API for JobScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobSchedulerClient interface {
	GetStatusJobScheduler(ctx context.Context, in *request.GetStatusJobScheduler, opts ...grpc.CallOption) (*response.JobSchedulerStatus, error)
	ConfigureNodesMissingScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureNodesMissingScheduler, error)
	ConfigureDeleteNodesScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureDeleteNodesScheduler, error)
	ConfigureMissingNodesForDeletionScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureMissingNodesForDeletionScheduler, error)
}

type jobSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSchedulerClient(cc grpc.ClientConnInterface) JobSchedulerClient {
	return &jobSchedulerClient{cc}
}

func (c *jobSchedulerClient) GetStatusJobScheduler(ctx context.Context, in *request.GetStatusJobScheduler, opts ...grpc.CallOption) (*response.JobSchedulerStatus, error) {
	out := new(response.JobSchedulerStatus)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.JobScheduler/GetStatusJobScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerClient) ConfigureNodesMissingScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureNodesMissingScheduler, error) {
	out := new(response.ConfigureNodesMissingScheduler)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.JobScheduler/ConfigureNodesMissingScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerClient) ConfigureDeleteNodesScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureDeleteNodesScheduler, error) {
	out := new(response.ConfigureDeleteNodesScheduler)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.JobScheduler/ConfigureDeleteNodesScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerClient) ConfigureMissingNodesForDeletionScheduler(ctx context.Context, in *request.SchedulerConfig, opts ...grpc.CallOption) (*response.ConfigureMissingNodesForDeletionScheduler, error) {
	out := new(response.ConfigureMissingNodesForDeletionScheduler)
	err := c.cc.Invoke(ctx, "/chef.automate.api.ingest.JobScheduler/ConfigureMissingNodesForDeletionScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSchedulerServer is the server API for JobScheduler service.
type JobSchedulerServer interface {
	GetStatusJobScheduler(context.Context, *request.GetStatusJobScheduler) (*response.JobSchedulerStatus, error)
	ConfigureNodesMissingScheduler(context.Context, *request.SchedulerConfig) (*response.ConfigureNodesMissingScheduler, error)
	ConfigureDeleteNodesScheduler(context.Context, *request.SchedulerConfig) (*response.ConfigureDeleteNodesScheduler, error)
	ConfigureMissingNodesForDeletionScheduler(context.Context, *request.SchedulerConfig) (*response.ConfigureMissingNodesForDeletionScheduler, error)
}

// UnimplementedJobSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedJobSchedulerServer struct {
}

func (*UnimplementedJobSchedulerServer) GetStatusJobScheduler(ctx context.Context, req *request.GetStatusJobScheduler) (*response.JobSchedulerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusJobScheduler not implemented")
}
func (*UnimplementedJobSchedulerServer) ConfigureNodesMissingScheduler(ctx context.Context, req *request.SchedulerConfig) (*response.ConfigureNodesMissingScheduler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNodesMissingScheduler not implemented")
}
func (*UnimplementedJobSchedulerServer) ConfigureDeleteNodesScheduler(ctx context.Context, req *request.SchedulerConfig) (*response.ConfigureDeleteNodesScheduler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDeleteNodesScheduler not implemented")
}
func (*UnimplementedJobSchedulerServer) ConfigureMissingNodesForDeletionScheduler(ctx context.Context, req *request.SchedulerConfig) (*response.ConfigureMissingNodesForDeletionScheduler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureMissingNodesForDeletionScheduler not implemented")
}

func RegisterJobSchedulerServer(s *grpc.Server, srv JobSchedulerServer) {
	s.RegisterService(&_JobScheduler_serviceDesc, srv)
}

func _JobScheduler_GetStatusJobScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetStatusJobScheduler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServer).GetStatusJobScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.JobScheduler/GetStatusJobScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServer).GetStatusJobScheduler(ctx, req.(*request.GetStatusJobScheduler))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobScheduler_ConfigureNodesMissingScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SchedulerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServer).ConfigureNodesMissingScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.JobScheduler/ConfigureNodesMissingScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServer).ConfigureNodesMissingScheduler(ctx, req.(*request.SchedulerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobScheduler_ConfigureDeleteNodesScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SchedulerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServer).ConfigureDeleteNodesScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.JobScheduler/ConfigureDeleteNodesScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServer).ConfigureDeleteNodesScheduler(ctx, req.(*request.SchedulerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobScheduler_ConfigureMissingNodesForDeletionScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SchedulerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServer).ConfigureMissingNodesForDeletionScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.ingest.JobScheduler/ConfigureMissingNodesForDeletionScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServer).ConfigureMissingNodesForDeletionScheduler(ctx, req.(*request.SchedulerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.ingest.JobScheduler",
	HandlerType: (*JobSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatusJobScheduler",
			Handler:    _JobScheduler_GetStatusJobScheduler_Handler,
		},
		{
			MethodName: "ConfigureNodesMissingScheduler",
			Handler:    _JobScheduler_ConfigureNodesMissingScheduler_Handler,
		},
		{
			MethodName: "ConfigureDeleteNodesScheduler",
			Handler:    _JobScheduler_ConfigureDeleteNodesScheduler_Handler,
		},
		{
			MethodName: "ConfigureMissingNodesForDeletionScheduler",
			Handler:    _JobScheduler_ConfigureMissingNodesForDeletionScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/ingest/job_scheduler.proto",
}
