syntax = "proto3";
package chef.automate.api.infra_proxy;
option go_package = "github.com/chef/automate/api/external/infra_proxy";
import "google/api/annotations.proto";
import "api/external/infra_proxy/request/orgs.proto";
import "api/external/infra_proxy/request/servers.proto";
import "api/external/infra_proxy/request/cookbooks.proto";
import "api/external/infra_proxy/request/roles.proto";
import "api/external/infra_proxy/request/clients.proto";
import "api/external/infra_proxy/request/databags.proto";
import "api/external/infra_proxy/request/environments.proto";
import "api/external/infra_proxy/request/nodes.proto";
import "api/external/infra_proxy/request/policyfiles.proto";
import "api/external/infra_proxy/response/orgs.proto";
import "api/external/infra_proxy/response/servers.proto";
import "api/external/infra_proxy/response/cookbooks.proto";
import "api/external/infra_proxy/response/roles.proto";
import "api/external/infra_proxy/response/clients.proto";
import "api/external/infra_proxy/response/databags.proto";
import "api/external/infra_proxy/response/environments.proto";
import "api/external/infra_proxy/response/nodes.proto";
import "api/external/infra_proxy/response/policyfiles.proto";
import "api/external/common/version/version.proto";
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
service InfraProxy {
  rpc GetVersion ( chef.automate.api.common.version.VersionInfoRequest ) returns ( chef.automate.api.common.version.VersionInfo ) {
    option (google.api.http) = { get:"/infra/version" };
    option (chef.automate.api.iam.policy) = { resource:"system:service:version" action:"system:serviceVersion:get" };
  }
  rpc GetServers ( request.GetServers ) returns ( response.GetServers ) {
    option (google.api.http) = { get:"/infra/servers" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers" action:"infra:infraServers:list" };
  }
  rpc GetServer ( request.GetServer ) returns ( response.GetServer ) {
    option (google.api.http) = { get:"/infra/servers/{id}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{id}" action:"infra:infraServers:get" };
  }
  rpc GetServerByName ( request.GetServerByName ) returns ( response.GetServer ) {
    option (google.api.http) = { get:"/infra/servers/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{name}" action:"infra:infraServers:get" };
  }
  rpc CreateServer ( request.CreateServer ) returns ( response.CreateServer ) {
    option (google.api.http) = { post:"/infra/servers" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers" action:"infra:infraServers:create" };
  }
  rpc UpdateServer ( request.UpdateServer ) returns ( response.UpdateServer ) {
    option (google.api.http) = { put:"/infra/servers/{id}" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{id}" action:"infra:infraServers:update" };
  }
  rpc DeleteServer ( request.DeleteServer ) returns ( response.DeleteServer ) {
    option (google.api.http) = { delete:"/infra/servers/{id}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{id}" action:"infra:infraServers:delete" };
  }
  rpc GetOrgs ( request.GetOrgs ) returns ( response.GetOrgs ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs" action:"infra:infraServerOrgs:get" };
  }
  rpc GetOrg ( request.GetOrg ) returns ( response.GetOrg ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{id}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{id}" action:"infra:infraServerOrgs:get" };
  }
  rpc GetOrgByName ( request.GetOrgByName ) returns ( response.GetOrg ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{name}" action:"infra:infraServerOrgs:get" };
  }
  rpc CreateOrg ( request.CreateOrg ) returns ( response.CreateOrg ) {
    option (google.api.http) = { post:"/infra/servers/{server_id}/orgs" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs" action:"infra:infraServerOrgs:create" };
  }
  rpc UpdateOrg ( request.UpdateOrg ) returns ( response.UpdateOrg ) {
    option (google.api.http) = { put:"/infra/servers/{server_id}/orgs/{id}" body:"*" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{id}" action:"infra:infraServerOrgs:update" };
  }
  rpc DeleteOrg ( request.DeleteOrg ) returns ( response.DeleteOrg ) {
    option (google.api.http) = { delete:"/infra/servers/{server_id}/orgs/{id}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{id}" action:"infra:infraServerOrgs:delete" };
  }
  rpc GetCookbooks ( request.Cookbooks ) returns ( response.Cookbooks ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/cookbooks" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:cookbooks" action:"infra:infraServerOrgCookbooks:list" };
  }
  rpc GetCookbookVersions ( request.CookbookVersions ) returns ( response.CookbookVersions ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:cookbooks" action:"infra:infraServerOrgCookbooks:list" };
  }
  rpc GetCookbook ( request.Cookbook ) returns ( response.Cookbook ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}/{version}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:cookbooks" action:"infra:infraServerOrgCookbooks:get" };
  }
  rpc GetCookbookFileContent ( request.CookbookFileContent ) returns ( response.CookbookFileContent ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}/{version}/file-content" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:cookbooks" action:"infra:infraServerOrgCookbooks:get" };
  }
  rpc GetRoles ( request.Roles ) returns ( response.Roles ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/roles" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:roles" action:"infra:infraServerOrgRoles:list" };
  }
  rpc GetRole ( request.Role ) returns ( response.Role ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/roles/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:roles" action:"infra:infraServerOrgRoles:get" };
  }
  rpc GetClients ( request.Clients ) returns ( response.Clients ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/clients" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:clients" action:"infra:infraServerOrgClients:list" };
  }
  rpc GetClient ( request.Client ) returns ( response.Client ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/clients/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:servers:{server_id}:orgs:{org_id}:clients" action:"infra:serverOrgClients:get" };
  }
  rpc GetDataBags ( request.DataBags ) returns ( response.DataBags ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:data_bags" action:"infra:infraServerOrgDataBags:list" };
  }
  rpc GetDataBagItem ( request.DataBag ) returns ( response.DataBag ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}/{item}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:data_bags" action:"infra:infraServerOrgDataBags:get" };
  }
  rpc GetEnvironments ( request.Environments ) returns ( response.Environments ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/environments" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:environments" action:"infra:infraServerOrgEnvironments:list" };
  }
  rpc GetEnvironment ( request.Environment ) returns ( response.Environment ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/environments/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:environments" action:"infra:infraServerOrgEnvironments:get" };
  }
  rpc GetAffectedNodes ( request.AffectedNodes ) returns ( response.AffectedNodes ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/affected-nodes/{chef_type}/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:nodes" action:"infra:infraServerOrgNodes:get" };
  }
  rpc GetPolicyfiles ( request.Policyfiles ) returns ( response.Policyfiles ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/policyfiles" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:policyfiles" action:"infra:infraServerOrgPolicyfiles:list" };
  }
  rpc GetPolicyfile ( request.Policyfile ) returns ( response.Policyfile ) {
    option (google.api.http) = { get:"/infra/servers/{server_id}/orgs/{org_id}/policyfiles/{name}" };
    option (chef.automate.api.iam.policy) = { resource:"infra:infraServers:{server_id}:orgs:{org_id}:policyfiles" action:"infra:infraServerOrgPolicyfiles:get" };
  }
}
