// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/compliance-service/ingest/ingest/compliance.proto

package ingest // import "github.com/chef/automate/components/compliance-service/ingest/ingest"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import event "github.com/chef/automate/api/interservice/event"
import compliance "github.com/chef/automate/components/compliance-service/ingest/events/compliance"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ComplianceIngesterClient is the client API for ComplianceIngester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComplianceIngesterClient interface {
	ProcessComplianceReport(ctx context.Context, in *compliance.Report, opts ...grpc.CallOption) (*empty.Empty, error)
	HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error)
}

type complianceIngesterClient struct {
	cc *grpc.ClientConn
}

func NewComplianceIngesterClient(cc *grpc.ClientConn) ComplianceIngesterClient {
	return &complianceIngesterClient{cc}
}

func (c *complianceIngesterClient) ProcessComplianceReport(ctx context.Context, in *compliance.Report, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProcessComplianceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceIngesterClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	out := new(event.EventResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceIngesterServer is the server API for ComplianceIngester service.
type ComplianceIngesterServer interface {
	ProcessComplianceReport(context.Context, *compliance.Report) (*empty.Empty, error)
	HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error)
}

func RegisterComplianceIngesterServer(s *grpc.Server, srv ComplianceIngesterServer) {
	s.RegisterService(&_ComplianceIngester_serviceDesc, srv)
}

func _ComplianceIngester_ProcessComplianceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(compliance.Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceIngesterServer).ProcessComplianceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProcessComplianceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceIngesterServer).ProcessComplianceReport(ctx, req.(*compliance.Report))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceIngester_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceIngesterServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceIngesterServer).HandleEvent(ctx, req.(*event.EventMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceIngester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.compliance.ingest.ingest.ComplianceIngester",
	HandlerType: (*ComplianceIngesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessComplianceReport",
			Handler:    _ComplianceIngester_ProcessComplianceReport_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _ComplianceIngester_HandleEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/compliance-service/ingest/ingest/compliance.proto",
}

func init() {
	proto.RegisterFile("components/compliance-service/ingest/ingest/compliance.proto", fileDescriptor_compliance_b85da27d184c450d)
}

var fileDescriptor_compliance_b85da27d184c450d = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xd5, 0x0e, 0x0c, 0x61, 0xf3, 0x00, 0x22, 0x20, 0x86, 0x8a, 0x01, 0x21, 0xc5, 0x96,
	0x60, 0x43, 0x0c, 0x08, 0x28, 0x3f, 0x03, 0x12, 0xea, 0xc8, 0xe6, 0xa4, 0x37, 0xa9, 0xa5, 0xc4,
	0xd7, 0xb2, 0x6f, 0x2a, 0xb1, 0xf2, 0x0a, 0x2c, 0xf0, 0x5c, 0xbc, 0x02, 0x0f, 0x82, 0x6c, 0x27,
	0xb4, 0x82, 0x0e, 0x61, 0x89, 0x13, 0xdd, 0x73, 0xce, 0xfd, 0x4e, 0xe4, 0xe4, 0xa2, 0xc0, 0xc6,
	0xa0, 0x06, 0x4d, 0x4e, 0xf8, 0xd7, 0x5a, 0x49, 0x5d, 0x40, 0xe6, 0xc0, 0x2e, 0x55, 0x01, 0x42,
	0xe9, 0x0a, 0x1c, 0xf5, 0xc7, 0x4a, 0xc0, 0x8d, 0x45, 0x42, 0x96, 0x15, 0x0b, 0x28, 0xb9, 0x6c,
	0x09, 0x1b, 0x49, 0xc0, 0xe7, 0xd8, 0x48, 0xa5, 0xf9, 0x9a, 0x2c, 0x1a, 0xbb, 0x23, 0x3d, 0xa8,
	0x10, 0xab, 0x1a, 0x84, 0x34, 0x4a, 0x48, 0xad, 0x91, 0x24, 0x29, 0xd4, 0x2e, 0x86, 0xa5, 0x77,
	0x83, 0x50, 0x60, 0xf9, 0x4b, 0xf0, 0x87, 0x2a, 0xdd, 0xef, 0xd6, 0x84, 0xaf, 0xbc, 0x2d, 0x05,
	0x34, 0x86, 0x5e, 0xba, 0xe1, 0xc4, 0x2f, 0x57, 0x9a, 0xc0, 0xf6, 0xc1, 0x21, 0x31, 0x3e, 0xa3,
	0xe6, 0xf4, 0x7d, 0x9c, 0xb0, 0xeb, 0x9f, 0xd4, 0x87, 0xb0, 0x18, 0x2c, 0xfb, 0x18, 0x25, 0xbb,
	0x4f, 0x16, 0x0b, 0x70, 0x6e, 0x35, 0x9d, 0x81, 0x41, 0x4b, 0xec, 0x92, 0x0f, 0xfc, 0x15, 0x91,
	0x7f, 0x7d, 0x10, 0x13, 0xd2, 0x1d, 0x1e, 0xb1, 0x79, 0x8f, 0xcd, 0xa7, 0x1e, 0x7b, 0x72, 0xf4,
	0xfa, 0xf9, 0xf5, 0x36, 0x3e, 0x9c, 0xec, 0x6d, 0xa8, 0x6e, 0x83, 0xf5, 0x7c, 0x74, 0xc2, 0xca,
	0x64, 0xfb, 0x5e, 0xea, 0x79, 0x0d, 0x53, 0x2f, 0x62, 0xc7, 0x9b, 0x71, 0x62, 0x49, 0x69, 0x14,
	0x0f, 0xb2, 0x47, 0x57, 0xa5, 0xd9, 0x20, 0xe5, 0x0c, 0x9c, 0x41, 0xed, 0xe0, 0xea, 0xf6, 0xf9,
	0xa6, 0x52, 0xb4, 0x68, 0x73, 0xdf, 0x40, 0x78, 0xab, 0xe8, 0xad, 0xe2, 0x1f, 0x57, 0x29, 0xdf,
	0x0a, 0x2d, 0xcf, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x92, 0xb4, 0xab, 0xfd, 0x80, 0x02, 0x00,
	0x00,
}
