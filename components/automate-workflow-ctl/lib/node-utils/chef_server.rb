require "tmpdir"
require "json"
require "node-utils/shell_out"

module NodeUtils
  module ChefServer
    # Gets the list of nodes utilizing chef-server-ctl filtered-dump command
    def info
      @info ||= begin
        nodes = nil
        orgs = nil

        Dir.mktmpdir do |dir|
          nodes_dump_file = File.join(dir, "nodes.json")
          orgs_dump_file = File.join(dir, "orgs.json")

          begin
            cmd = ShellOut.shell_out("chef-server-ctl filtered-dump", cwd: dir)
          rescue Exception
            # we have a broad catch here because run_command in shell_out can
            # raise Errno::EACCES, Errno::ENOENT or Mixlib::ShellOut::CommandTimeout
            # and potentially others in the future. We do not have a debug log
            # here because automate-ctl does not have a concept of different log
            # levels as of now. But for debugging you can enable below line.

            # NodeUtils::Log.error("Error while running 'chef-server-ctl filtered-dump':")
            # NodeUtils::Log.error(e.inspect)
            cmd = nil
          end

          if !cmd.nil? && !cmd.error? && File.exists?(nodes_dump_file) && File.exists?(orgs_dump_file)
            begin
              nodes = JSON.parse(File.read(nodes_dump_file))
              orgs = JSON.parse(File.read(orgs_dump_file))
            rescue JSON::ParserError
              # We do not have a debug log # here because automate-ctl does not
              # have a concept of different log levels as of now. But for
              # debugging you can enable below line.

              # NodeUtils::Log.error("Error parsing the json files generated by 'chef-server-ctl filtered-dump'.")
            end
          end
        end

        {
          nodes: nodes,
          orgs: orgs,
        }
      end
    end
    module_function :info

    def nodes
      ChefServer.info[:nodes]
    end
    module_function :nodes

    def orgs
      ChefServer.info[:orgs]
    end
    module_function :orgs
  end
end
