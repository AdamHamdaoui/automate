// Code generated by MockGen. DO NOT EDIT.
// Source: ../../compliance-service/api/automate-feed/feed.pb.go

// Package mock_automate_feed is a generated GoMock package.
package mock_automate_feed

import (
	event "github.com/chef/automate/api/interservice/event"
	automate_feed "github.com/chef/automate/components/compliance-service/api/automate-feed"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFeedServiceClient is a mock of FeedServiceClient interface
type MockFeedServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServiceClientMockRecorder
}

// MockFeedServiceClientMockRecorder is the mock recorder for MockFeedServiceClient
type MockFeedServiceClientMockRecorder struct {
	mock *MockFeedServiceClient
}

// NewMockFeedServiceClient creates a new mock instance
func NewMockFeedServiceClient(ctrl *gomock.Controller) *MockFeedServiceClient {
	mock := &MockFeedServiceClient{ctrl: ctrl}
	mock.recorder = &MockFeedServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedServiceClient) EXPECT() *MockFeedServiceClientMockRecorder {
	return m.recorder
}

// GetFeed mocks base method
func (m *MockFeedServiceClient) GetFeed(ctx context.Context, in *automate_feed.FeedRequest, opts ...grpc.CallOption) (*automate_feed.FeedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeed", varargs...)
	ret0, _ := ret[0].(*automate_feed.FeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockFeedServiceClientMockRecorder) GetFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockFeedServiceClient)(nil).GetFeed), varargs...)
}

// GetFeedSummary mocks base method
func (m *MockFeedServiceClient) GetFeedSummary(ctx context.Context, in *automate_feed.FeedSummaryRequest, opts ...grpc.CallOption) (*automate_feed.FeedSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedSummary", varargs...)
	ret0, _ := ret[0].(*automate_feed.FeedSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedSummary indicates an expected call of GetFeedSummary
func (mr *MockFeedServiceClientMockRecorder) GetFeedSummary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedSummary", reflect.TypeOf((*MockFeedServiceClient)(nil).GetFeedSummary), varargs...)
}

// GetFeedTimeline mocks base method
func (m *MockFeedServiceClient) GetFeedTimeline(ctx context.Context, in *automate_feed.FeedTimelineRequest, opts ...grpc.CallOption) (*automate_feed.FeedTimelineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedTimeline", varargs...)
	ret0, _ := ret[0].(*automate_feed.FeedTimelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedTimeline indicates an expected call of GetFeedTimeline
func (mr *MockFeedServiceClientMockRecorder) GetFeedTimeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedTimeline", reflect.TypeOf((*MockFeedServiceClient)(nil).GetFeedTimeline), varargs...)
}

// HandleEvent mocks base method
func (m *MockFeedServiceClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleEvent", varargs...)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockFeedServiceClientMockRecorder) HandleEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockFeedServiceClient)(nil).HandleEvent), varargs...)
}

// MockFeedServiceServer is a mock of FeedServiceServer interface
type MockFeedServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServiceServerMockRecorder
}

// MockFeedServiceServerMockRecorder is the mock recorder for MockFeedServiceServer
type MockFeedServiceServerMockRecorder struct {
	mock *MockFeedServiceServer
}

// NewMockFeedServiceServer creates a new mock instance
func NewMockFeedServiceServer(ctrl *gomock.Controller) *MockFeedServiceServer {
	mock := &MockFeedServiceServer{ctrl: ctrl}
	mock.recorder = &MockFeedServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedServiceServer) EXPECT() *MockFeedServiceServerMockRecorder {
	return m.recorder
}

// GetFeed mocks base method
func (m *MockFeedServiceServer) GetFeed(arg0 context.Context, arg1 *automate_feed.FeedRequest) (*automate_feed.FeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0, arg1)
	ret0, _ := ret[0].(*automate_feed.FeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockFeedServiceServerMockRecorder) GetFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockFeedServiceServer)(nil).GetFeed), arg0, arg1)
}

// GetFeedSummary mocks base method
func (m *MockFeedServiceServer) GetFeedSummary(arg0 context.Context, arg1 *automate_feed.FeedSummaryRequest) (*automate_feed.FeedSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedSummary", arg0, arg1)
	ret0, _ := ret[0].(*automate_feed.FeedSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedSummary indicates an expected call of GetFeedSummary
func (mr *MockFeedServiceServerMockRecorder) GetFeedSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedSummary", reflect.TypeOf((*MockFeedServiceServer)(nil).GetFeedSummary), arg0, arg1)
}

// GetFeedTimeline mocks base method
func (m *MockFeedServiceServer) GetFeedTimeline(arg0 context.Context, arg1 *automate_feed.FeedTimelineRequest) (*automate_feed.FeedTimelineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedTimeline", arg0, arg1)
	ret0, _ := ret[0].(*automate_feed.FeedTimelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedTimeline indicates an expected call of GetFeedTimeline
func (mr *MockFeedServiceServerMockRecorder) GetFeedTimeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedTimeline", reflect.TypeOf((*MockFeedServiceServer)(nil).GetFeedTimeline), arg0, arg1)
}

// HandleEvent mocks base method
func (m *MockFeedServiceServer) HandleEvent(arg0 context.Context, arg1 *event.EventMsg) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockFeedServiceServerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockFeedServiceServer)(nil).HandleEvent), arg0, arg1)
}
