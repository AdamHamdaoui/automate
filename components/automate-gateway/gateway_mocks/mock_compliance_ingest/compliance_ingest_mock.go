// Code generated by MockGen. DO NOT EDIT.
// Source: ../../compliance-service/ingest/ingest/compliance.pb.go

// Package mock_compliance_ingest is a generated GoMock package.
package mock_compliance_ingest

import (
	reflect "reflect"

	event "github.com/chef/automate/api/interservice/event"
	compliance "github.com/chef/automate/components/compliance-service/ingest/events/compliance"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockComplianceIngesterClient is a mock of ComplianceIngesterClient interface
type MockComplianceIngesterClient struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceIngesterClientMockRecorder
}

// MockComplianceIngesterClientMockRecorder is the mock recorder for MockComplianceIngesterClient
type MockComplianceIngesterClientMockRecorder struct {
	mock *MockComplianceIngesterClient
}

// NewMockComplianceIngesterClient creates a new mock instance
func NewMockComplianceIngesterClient(ctrl *gomock.Controller) *MockComplianceIngesterClient {
	mock := &MockComplianceIngesterClient{ctrl: ctrl}
	mock.recorder = &MockComplianceIngesterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComplianceIngesterClient) EXPECT() *MockComplianceIngesterClientMockRecorder {
	return m.recorder
}

// ProcessComplianceReport mocks base method
func (m *MockComplianceIngesterClient) ProcessComplianceReport(ctx context.Context, in *compliance.Report, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessComplianceReport", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessComplianceReport indicates an expected call of ProcessComplianceReport
func (mr *MockComplianceIngesterClientMockRecorder) ProcessComplianceReport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessComplianceReport", reflect.TypeOf((*MockComplianceIngesterClient)(nil).ProcessComplianceReport), varargs...)
}

// HandleEvent mocks base method
func (m *MockComplianceIngesterClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleEvent", varargs...)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockComplianceIngesterClientMockRecorder) HandleEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockComplianceIngesterClient)(nil).HandleEvent), varargs...)
}

// MockComplianceIngesterServer is a mock of ComplianceIngesterServer interface
type MockComplianceIngesterServer struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceIngesterServerMockRecorder
}

// MockComplianceIngesterServerMockRecorder is the mock recorder for MockComplianceIngesterServer
type MockComplianceIngesterServerMockRecorder struct {
	mock *MockComplianceIngesterServer
}

// NewMockComplianceIngesterServer creates a new mock instance
func NewMockComplianceIngesterServer(ctrl *gomock.Controller) *MockComplianceIngesterServer {
	mock := &MockComplianceIngesterServer{ctrl: ctrl}
	mock.recorder = &MockComplianceIngesterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComplianceIngesterServer) EXPECT() *MockComplianceIngesterServerMockRecorder {
	return m.recorder
}

// ProcessComplianceReport mocks base method
func (m *MockComplianceIngesterServer) ProcessComplianceReport(arg0 context.Context, arg1 *compliance.Report) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessComplianceReport", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessComplianceReport indicates an expected call of ProcessComplianceReport
func (mr *MockComplianceIngesterServerMockRecorder) ProcessComplianceReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessComplianceReport", reflect.TypeOf((*MockComplianceIngesterServer)(nil).ProcessComplianceReport), arg0, arg1)
}

// HandleEvent mocks base method
func (m *MockComplianceIngesterServer) HandleEvent(arg0 context.Context, arg1 *event.EventMsg) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockComplianceIngesterServerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockComplianceIngesterServer)(nil).HandleEvent), arg0, arg1)
}
