syntax = "proto3";

package chef.automate.api.teams;
option go_package = "github.com/chef/automate/components/automate-gateway/api/auth/teams";

import "google/api/annotations.proto";

import "api/external/common/version/version.proto";
import "components/automate-gateway/api/auth/teams/request/teams.proto";
import "components/automate-gateway/api/auth/teams/response/teams.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Teams {
  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/auth/teams/version";
    option (chef.automate.api.policy).resource = "service_info:version";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
  };
  rpc GetTeams (teams.request.GetTeamsReq) returns (teams.response.Teams) {
    option (google.api.http).get = "/auth/teams";
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:list";
  };
  rpc GetTeam (teams.request.GetTeamReq) returns (teams.response.GetTeamResp) {
    option (google.api.http).get = "/auth/teams/{id}";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:get";
  };
  rpc CreateTeam (teams.request.CreateTeamReq) returns (teams.response.CreateTeamResp) {
    option (google.api.http).post = "/auth/teams";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:create";
  };
  rpc UpdateTeam (teams.request.UpdateTeamReq) returns (teams.response.UpdateTeamResp) {
    option (google.api.http).put = "/auth/teams/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:update";
  };
  rpc DeleteTeam (teams.request.DeleteTeamReq) returns (teams.response.DeleteTeamResp) {
    option (google.api.http).delete = "/auth/teams/{id}";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:delete";
  };
  rpc GetUsers (teams.request.GetUsersReq) returns (teams.response.GetUsersResp) {
    option (google.api.http).get = "/auth/teams/{id}/users";
    option (chef.automate.api.policy).resource = "auth:teams:{id}:users";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}:users";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:list";
  }
  rpc AddUsers (teams.request.AddUsersReq) returns (teams.response.AddUsersResp) {
    option (google.api.http).post = "/auth/teams/{id}/users";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:create";
  };
  rpc RemoveUsers (teams.request.RemoveUsersReq) returns (teams.response.RemoveUsersResp) {
    option (google.api.http).put = "/auth/teams/{id}/users";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:delete";
  };
  rpc GetTeamsForUser (teams.request.GetTeamsForUserReq) returns (teams.response.GetTeamsForUserResp) {
    option (google.api.http).get = "/auth/users/{id}/teams";
    option (chef.automate.api.policy).resource = "auth:users:{id}:teams";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}:teams";
    option (chef.automate.api.iam.policy).action = "iam:userTeams:get";
  };
}
