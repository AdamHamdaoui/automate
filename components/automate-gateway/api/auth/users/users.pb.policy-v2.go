// Code generated by protoc-gen-policy. DO NOT EDIT.
// source: components/automate-gateway/api/auth/users/users.proto

package users

import (
	request "github.com/chef/automate/components/automate-gateway/api/auth/users/request"
	policyv2 "github.com/chef/automate/components/automate-gateway/authz/policy_v2"
)

func init() {
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/GetUsers", "iam:users", "iam:users:list", "GET", "/auth/users", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/GetUserByUsername", "iam:users:{username}", "iam:users:get", "GET", "/auth/users/{username}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Username); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "username":
					return m.Username
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/CreateUser", "iam:users", "iam:users:create", "POST", "/auth/users", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.CreateUser); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "name":
					return m.Name
				case "email":
					return m.Email
				case "username":
					return m.Username
				case "password":
					return m.Password
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/DeleteUserByUsername", "iam:users:{username}", "iam:users:delete", "DELETE", "/auth/users/{username}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Username); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "username":
					return m.Username
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/UpdateUser", "iam:users:{username}", "iam:users:update", "PUT", "/auth/users/{username}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.UpdateUser); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "email":
					return m.Email
				case "name":
					return m.Name
				case "password":
					return m.Password
				case "username":
					return m.Username
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/UpdateSelf", "iam:usersSelf:{username}", "iam:usersSelf:update", "PUT", "/users/{username}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.UpdateSelf); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "name":
					return m.Name
				case "password":
					return m.Password
				case "username":
					return m.Username
				case "previous_password":
					return m.PreviousPassword
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/GetUser", "iam:users:{email}", "iam:users:get", "", "", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Email); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "email":
					return m.Email
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.users.UsersMgmt/DeleteUser", "iam:users:{email}", "iam:users:delete", "", "", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Email); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "email":
					return m.Email
				default:
					return ""
				}
			})
		}
		return ""
	})
}
