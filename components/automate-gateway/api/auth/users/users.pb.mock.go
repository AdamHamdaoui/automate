// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.
// source: components/automate-gateway/api/auth/users/users.proto

package users

import (
	"context"

	request "github.com/chef/automate/components/automate-gateway/api/auth/users/request"
	response "github.com/chef/automate/components/automate-gateway/api/auth/users/response"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// verify that the mock satisfies the UsersMgmtServer interface (at compile time)
var _ UsersMgmtServer = &UsersMgmtServerMock{}

// NewUsersMgmtServerMock gives you a fresh instance of UsersMgmtServerMock.
func NewUsersMgmtServerMock() *UsersMgmtServerMock {
	return &UsersMgmtServerMock{validateRequests: true}
}

// NewUsersMgmtServerMockWithoutValidation gives you a fresh instance of
// UsersMgmtServerMock which does not attempt to validate requests before passing
// them to their respective '*Func'.
func NewUsersMgmtServerMockWithoutValidation() *UsersMgmtServerMock {
	return &UsersMgmtServerMock{}
}

// UsersMgmtServerMock is the mock-what-you-want struct that stubs all not-overridden
// methods with "not implemented" returns
type UsersMgmtServerMock struct {
	validateRequests         bool
	GetUsersFunc             func(context.Context, *request.GetUsersReq) (*response.Users, error)
	GetUserByUsernameFunc    func(context.Context, *request.Username) (*response.User, error)
	CreateUserFunc           func(context.Context, *request.CreateUser) (*response.User, error)
	DeleteUserByUsernameFunc func(context.Context, *request.Username) (*response.DeleteUserResp, error)
	UpdateUserFunc           func(context.Context, *request.UpdateUser) (*response.User, error)
	UpdateSelfFunc           func(context.Context, *request.UpdateSelf) (*response.User, error)
	GetUserFunc              func(context.Context, *request.Email) (*response.User, error)
	DeleteUserFunc           func(context.Context, *request.Email) (*response.DeleteUserResp, error)
}

func (m *UsersMgmtServerMock) GetUsers(ctx context.Context, req *request.GetUsersReq) (*response.Users, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetUsersFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetUsers' not implemented")
}

func (m *UsersMgmtServerMock) GetUserByUsername(ctx context.Context, req *request.Username) (*response.User, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetUserByUsernameFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetUserByUsername' not implemented")
}

func (m *UsersMgmtServerMock) CreateUser(ctx context.Context, req *request.CreateUser) (*response.User, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.CreateUserFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'CreateUser' not implemented")
}

func (m *UsersMgmtServerMock) DeleteUserByUsername(ctx context.Context, req *request.Username) (*response.DeleteUserResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteUserByUsernameFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteUserByUsername' not implemented")
}

func (m *UsersMgmtServerMock) UpdateUser(ctx context.Context, req *request.UpdateUser) (*response.User, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.UpdateUserFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'UpdateUser' not implemented")
}

func (m *UsersMgmtServerMock) UpdateSelf(ctx context.Context, req *request.UpdateSelf) (*response.User, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.UpdateSelfFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'UpdateSelf' not implemented")
}

func (m *UsersMgmtServerMock) GetUser(ctx context.Context, req *request.Email) (*response.User, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.GetUserFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'GetUser' not implemented")
}

func (m *UsersMgmtServerMock) DeleteUser(ctx context.Context, req *request.Email) (*response.DeleteUserResp, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteUserFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteUser' not implemented")
}

// Reset resets all overridden functions
func (m *UsersMgmtServerMock) Reset() {
	m.GetUsersFunc = nil
	m.GetUserByUsernameFunc = nil
	m.CreateUserFunc = nil
	m.DeleteUserByUsernameFunc = nil
	m.UpdateUserFunc = nil
	m.UpdateSelfFunc = nil
	m.GetUserFunc = nil
	m.DeleteUserFunc = nil
}
