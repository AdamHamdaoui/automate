// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.
// source: components/automate-gateway/api/nodes/manager/manager.proto

package manager

import (
	"context"

	empty "github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// verify that the mock satisfies the NodeManagerServiceServer interface (at compile time)
var _ NodeManagerServiceServer = &NodeManagerServiceServerMock{}

// NewNodeManagerServiceServerMock gives you a fresh instance of NodeManagerServiceServerMock.
func NewNodeManagerServiceServerMock() *NodeManagerServiceServerMock {
	return &NodeManagerServiceServerMock{validateRequests: true}
}

// NewNodeManagerServiceServerMockWithoutValidation gives you a fresh instance of
// NodeManagerServiceServerMock which does not attempt to validate requests before passing
// them to their respective '*Func'.
func NewNodeManagerServiceServerMockWithoutValidation() *NodeManagerServiceServerMock {
	return &NodeManagerServiceServerMock{}
}

// NodeManagerServiceServerMock is the mock-what-you-want struct that stubs all not-overridden
// methods with "not implemented" returns
type NodeManagerServiceServerMock struct {
	validateRequests                  bool
	CreateFunc                        func(context.Context, *NodeManager) (*Ids, error)
	ReadFunc                          func(context.Context, *Id) (*NodeManager, error)
	UpdateFunc                        func(context.Context, *NodeManager) (*empty.Empty, error)
	DeleteFunc                        func(context.Context, *Id) (*empty.Empty, error)
	DeleteWithNodesFunc               func(context.Context, *Id) (*Ids, error)
	DeleteWithNodeStateStoppedFunc    func(context.Context, *Id) (*empty.Empty, error)
	DeleteWithNodeStateTerminatedFunc func(context.Context, *Id) (*empty.Empty, error)
	ListFunc                          func(context.Context, *Query) (*NodeManagers, error)
	SearchNodeFieldsFunc              func(context.Context, *FieldQuery) (*Fields, error)
	SearchNodesFunc                   func(context.Context, *NodeQuery) (*Nodes, error)
	ConnectFunc                       func(context.Context, *Id) (*ConnectResponse, error)
}

func (m *NodeManagerServiceServerMock) Create(ctx context.Context, req *NodeManager) (*Ids, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.CreateFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Create' not implemented")
}

func (m *NodeManagerServiceServerMock) Read(ctx context.Context, req *Id) (*NodeManager, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.ReadFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Read' not implemented")
}

func (m *NodeManagerServiceServerMock) Update(ctx context.Context, req *NodeManager) (*empty.Empty, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.UpdateFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Update' not implemented")
}

func (m *NodeManagerServiceServerMock) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Delete' not implemented")
}

func (m *NodeManagerServiceServerMock) DeleteWithNodes(ctx context.Context, req *Id) (*Ids, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteWithNodesFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteWithNodes' not implemented")
}

func (m *NodeManagerServiceServerMock) DeleteWithNodeStateStopped(ctx context.Context, req *Id) (*empty.Empty, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteWithNodeStateStoppedFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteWithNodeStateStopped' not implemented")
}

func (m *NodeManagerServiceServerMock) DeleteWithNodeStateTerminated(ctx context.Context, req *Id) (*empty.Empty, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.DeleteWithNodeStateTerminatedFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'DeleteWithNodeStateTerminated' not implemented")
}

func (m *NodeManagerServiceServerMock) List(ctx context.Context, req *Query) (*NodeManagers, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.ListFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'List' not implemented")
}

func (m *NodeManagerServiceServerMock) SearchNodeFields(ctx context.Context, req *FieldQuery) (*Fields, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.SearchNodeFieldsFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'SearchNodeFields' not implemented")
}

func (m *NodeManagerServiceServerMock) SearchNodes(ctx context.Context, req *NodeQuery) (*Nodes, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.SearchNodesFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'SearchNodes' not implemented")
}

func (m *NodeManagerServiceServerMock) Connect(ctx context.Context, req *Id) (*ConnectResponse, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.ConnectFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Connect' not implemented")
}

// Reset resets all overridden functions
func (m *NodeManagerServiceServerMock) Reset() {
	m.CreateFunc = nil
	m.ReadFunc = nil
	m.UpdateFunc = nil
	m.DeleteFunc = nil
	m.DeleteWithNodesFunc = nil
	m.DeleteWithNodeStateStoppedFunc = nil
	m.DeleteWithNodeStateTerminatedFunc = nil
	m.ListFunc = nil
	m.SearchNodeFieldsFunc = nil
	m.SearchNodesFunc = nil
	m.ConnectFunc = nil
}
