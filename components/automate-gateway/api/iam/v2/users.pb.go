// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/users.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/users.proto", fileDescriptor_8e7276f80918e43e)
}

var fileDescriptor_8e7276f80918e43e = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0xd9, 0xd2, 0x3f, 0x74, 0x7e, 0xb4, 0x3f, 0x1d, 0x8a, 0x96, 0x55, 0x31, 0x2c, 0x6a,
	0x25, 0x34, 0xbb, 0x6d, 0x7a, 0x8b, 0xf8, 0x27, 0x5a, 0x28, 0x14, 0x4d, 0x5b, 0x43, 0x2f, 0x7a,
	0x90, 0xe9, 0xe6, 0xc9, 0x76, 0x64, 0x77, 0x67, 0xb2, 0xb3, 0xdb, 0x18, 0x4b, 0x2f, 0x8a, 0x82,
	0x45, 0x10, 0xe2, 0xc5, 0x83, 0xd8, 0xb3, 0x08, 0xde, 0xea, 0xab, 0xf0, 0xe6, 0xc9, 0xbb, 0xef,
	0xc1, 0xab, 0xcc, 0x24, 0xd9, 0xec, 0x92, 0xa4, 0xd9, 0x53, 0x32, 0x33, 0xdf, 0x67, 0xf2, 0xd9,
	0x4f, 0xe6, 0x99, 0x45, 0x45, 0x9b, 0x79, 0x9c, 0xf9, 0xe0, 0x87, 0xc2, 0x22, 0x51, 0xc8, 0x3c,
	0x12, 0x42, 0xc1, 0x21, 0x21, 0x34, 0x49, 0xcb, 0x22, 0x9c, 0x5a, 0x94, 0x78, 0xd6, 0x41, 0xd1,
	0x8a, 0x04, 0x04, 0xc2, 0xe4, 0x01, 0x0b, 0x19, 0x5e, 0xb4, 0xf7, 0xa1, 0x6e, 0xf6, 0xd2, 0x26,
	0xe1, 0xd4, 0xa4, 0xc4, 0x33, 0x0f, 0x8a, 0xfa, 0x65, 0x87, 0x31, 0xc7, 0x05, 0x55, 0x48, 0x7c,
	0x9f, 0x85, 0x24, 0xa4, 0xcc, 0xef, 0xd6, 0xe9, 0xcb, 0xea, 0xc3, 0x2e, 0x38, 0xe0, 0x17, 0x44,
	0x93, 0x38, 0x0e, 0x04, 0x16, 0xe3, 0x2a, 0x31, 0x24, 0x5d, 0xca, 0x48, 0x16, 0x40, 0x23, 0x02,
	0x11, 0x26, 0x09, 0xf5, 0x5b, 0x99, 0x6b, 0x05, 0x67, 0xbe, 0x80, 0x54, 0xf1, 0xbd, 0xa1, 0xc5,
	0x01, 0xb7, 0xad, 0x04, 0x3f, 0x67, 0x2e, 0xb5, 0x5b, 0x6a, 0x9f, 0x01, 0xf4, 0xe2, 0x97, 0xff,
	0xd0, 0xd4, 0xae, 0xdc, 0x11, 0x7f, 0x9f, 0x40, 0xe8, 0x41, 0x00, 0x24, 0x04, 0x39, 0xc6, 0x4b,
	0xe6, 0x28, 0x75, 0x66, 0x3f, 0xf5, 0x18, 0x1a, 0xfa, 0xcd, 0x6c, 0x41, 0xc1, 0x8d, 0x9f, 0x5a,
	0xbb, 0xfc, 0x41, 0x43, 0x53, 0xea, 0x09, 0x9e, 0xbf, 0xd1, 0xd0, 0xfc, 0x8b, 0x82, 0xcd, 0x6a,
	0x50, 0x10, 0xc4, 0xe3, 0x2e, 0x08, 0x2c, 0x8a, 0x0d, 0xc4, 0xf2, 0x1e, 0x9a, 0x47, 0x93, 0x2e,
	0xf1, 0x1d, 0x3c, 0xad, 0x4f, 0x6e, 0x56, 0xb7, 0x2a, 0xe8, 0x29, 0x9a, 0x16, 0x2c, 0x0a, 0x6c,
	0xc0, 0x3b, 0xfa, 0xd6, 0xa1, 0xe1, 0x13, 0x0f, 0x8c, 0x52, 0xce, 0x58, 0xa7, 0x82, 0xbb, 0xa4,
	0x95, 0xab, 0xc8, 0xf1, 0x72, 0xce, 0xa0, 0x35, 0x39, 0x2b, 0x77, 0x97, 0x89, 0x95, 0x95, 0xd5,
	0x20, 0x72, 0xe1, 0xa5, 0x5c, 0xe1, 0x44, 0x88, 0x26, 0x0b, 0xd4, 0x3a, 0xa9, 0x92, 0x3a, 0x6c,
	0xf7, 0x26, 0x8e, 0x8e, 0x4f, 0x17, 0xaf, 0xa0, 0x59, 0x4a, 0xbc, 0x92, 0xc2, 0xc2, 0xe7, 0xe2,
	0xaf, 0x25, 0x5b, 0xe1, 0xbf, 0xfa, 0xf5, 0xe7, 0xe3, 0x04, 0x36, 0xe6, 0x52, 0xc7, 0xab, 0xa4,
	0xe5, 0xf1, 0x67, 0x0d, 0xcd, 0x3e, 0xa4, 0x22, 0xec, 0xe8, 0xbb, 0x31, 0x5a, 0x43, 0x1c, 0x92,
	0xba, 0x96, 0x32, 0xe5, 0x04, 0x37, 0xee, 0xb4, 0xcb, 0x33, 0x5d, 0x57, 0xc7, 0xa7, 0x8b, 0x97,
	0x92, 0x8c, 0xf3, 0x7d, 0x46, 0x97, 0x8a, 0x50, 0x11, 0xfe, 0x8f, 0xd3, 0x84, 0xf8, 0x44, 0x43,
	0x33, 0x1b, 0xa0, 0x36, 0xc4, 0xd7, 0x46, 0xff, 0x68, 0x37, 0x22, 0xd1, 0xae, 0x67, 0x48, 0x09,
	0x6e, 0x6c, 0xa4, 0xc0, 0xae, 0xa2, 0x04, 0xcd, 0x21, 0xad, 0x1d, 0xe1, 0xb9, 0xfe, 0xd8, 0x81,
	0x0e, 0xdc, 0x02, 0xc6, 0x29, 0x38, 0x4b, 0x05, 0xbf, 0x69, 0x08, 0xad, 0x83, 0x0b, 0xe3, 0x4f,
	0x5c, 0x3f, 0x35, 0xe6, 0xc4, 0x25, 0x83, 0x82, 0x1b, 0x9b, 0x29, 0x54, 0x63, 0x00, 0x35, 0xf1,
	0x67, 0xd7, 0x54, 0x65, 0x87, 0x36, 0x3f, 0x8c, 0xf6, 0xd3, 0x04, 0x42, 0xbb, 0xbc, 0x96, 0xa1,
	0x3f, 0xfa, 0xa9, 0x31, 0xb4, 0xc9, 0xa0, 0xe0, 0xc6, 0x0f, 0xad, 0x5d, 0xe6, 0xbd, 0xf6, 0x70,
	0x06, 0xba, 0x63, 0xb7, 0x58, 0x45, 0x3b, 0xf9, 0xad, 0x81, 0xee, 0xb8, 0x1d, 0x77, 0xc7, 0x9a,
	0xbe, 0xda, 0xef, 0x8e, 0x0a, 0x34, 0xe3, 0xce, 0x38, 0xfb, 0xfc, 0x9f, 0xe9, 0x25, 0x52, 0x8c,
	0xca, 0xcb, 0x45, 0x7d, 0x88, 0x17, 0xd9, 0x09, 0xbf, 0x63, 0x35, 0x55, 0x70, 0xeb, 0xe3, 0xd5,
	0xc8, 0x54, 0x26, 0x35, 0x9d, 0xa0, 0xe0, 0xc6, 0x5f, 0xad, 0x5d, 0xfe, 0x1a, 0x5f, 0x1d, 0x27,
	0x83, 0x57, 0xc7, 0x7b, 0xad, 0xf8, 0x4e, 0x43, 0x6f, 0xb5, 0xfc, 0x6b, 0x6d, 0x40, 0x50, 0x23,
	0x16, 0xe4, 0xe8, 0xd0, 0x17, 0xf4, 0xa8, 0x95, 0x1b, 0xe9, 0xa8, 0x02, 0xcd, 0x94, 0x26, 0xb9,
	0x1e, 0xc0, 0x01, 0x65, 0x91, 0x78, 0x96, 0x0a, 0x6e, 0x77, 0x67, 0x07, 0xa4, 0xe6, 0x11, 0x8e,
	0x25, 0xca, 0xc7, 0xe8, 0x88, 0x5d, 0x48, 0xcf, 0x25, 0xe4, 0x5e, 0xd0, 0xcf, 0xf7, 0xe4, 0x0a,
	0x70, 0xeb, 0x3d, 0xb7, 0xf7, 0xcb, 0x4f, 0xee, 0x3a, 0x34, 0xdc, 0x8f, 0xf6, 0x4c, 0x9b, 0x79,
	0x96, 0xf4, 0x15, 0xdf, 0xf4, 0x56, 0xb6, 0x57, 0xc7, 0xde, 0xb4, 0xba, 0xea, 0xd7, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x87, 0x3f, 0xd9, 0xd5, 0x41, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	// Create a user
	//
	// Creates a local user that can sign in to Automate and be a member of IAM teams
	// and IAM policies.
	//
	// Authorization Action:
	// ```
	// iam:users:create
	// ```
	CreateUser(ctx context.Context, in *request.CreateUserReq, opts ...grpc.CallOption) (*response.CreateUserResp, error)
	// List all users
	//
	// Lists all local users.
	//
	// Authorization Action:
	// ```
	// iam:users:list
	// ```
	ListUsers(ctx context.Context, in *request.ListUsersReq, opts ...grpc.CallOption) (*response.ListUsersResp, error)
	// Get a user
	//
	// Returns the details for a local user.
	//
	// Authorization Action:
	// ```
	// iam:users:get
	// ```
	GetUser(ctx context.Context, in *request.GetUserReq, opts ...grpc.CallOption) (*response.GetUserResp, error)
	// Delete a user
	//
	// Deletes a local user.
	//
	// Authorization Action:
	// ```
	// iam:users:delete
	// ```
	DeleteUser(ctx context.Context, in *request.DeleteUserReq, opts ...grpc.CallOption) (*response.DeleteUserResp, error)
	// Update a user
	//
	// Updates a local user's name or password.
	//
	// Authorization Action:
	// ```
	// iam:users:update
	// ```
	UpdateUser(ctx context.Context, in *request.UpdateUserReq, opts ...grpc.CallOption) (*response.UpdateUserResp, error)
	// Update self (as user)
	//
	// Updates a local user's own name or password.
	// If changing the password, both "password" and "previous_password" are required.
	//
	// Authorization Action:
	// ```
	// iam:usersSelf:update
	// ```
	UpdateSelf(ctx context.Context, in *request.UpdateSelfReq, opts ...grpc.CallOption) (*response.UpdateSelfResp, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *request.CreateUserReq, opts ...grpc.CallOption) (*response.CreateUserResp, error) {
	out := new(response.CreateUserResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListUsers(ctx context.Context, in *request.ListUsersReq, opts ...grpc.CallOption) (*response.ListUsersResp, error) {
	out := new(response.ListUsersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *request.GetUserReq, opts ...grpc.CallOption) (*response.GetUserResp, error) {
	out := new(response.GetUserResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *request.DeleteUserReq, opts ...grpc.CallOption) (*response.DeleteUserResp, error) {
	out := new(response.DeleteUserResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *request.UpdateUserReq, opts ...grpc.CallOption) (*response.UpdateUserResp, error) {
	out := new(response.UpdateUserResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateSelf(ctx context.Context, in *request.UpdateSelfReq, opts ...grpc.CallOption) (*response.UpdateSelfResp, error) {
	out := new(response.UpdateSelfResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Users/UpdateSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	// Create a user
	//
	// Creates a local user that can sign in to Automate and be a member of IAM teams
	// and IAM policies.
	//
	// Authorization Action:
	// ```
	// iam:users:create
	// ```
	CreateUser(context.Context, *request.CreateUserReq) (*response.CreateUserResp, error)
	// List all users
	//
	// Lists all local users.
	//
	// Authorization Action:
	// ```
	// iam:users:list
	// ```
	ListUsers(context.Context, *request.ListUsersReq) (*response.ListUsersResp, error)
	// Get a user
	//
	// Returns the details for a local user.
	//
	// Authorization Action:
	// ```
	// iam:users:get
	// ```
	GetUser(context.Context, *request.GetUserReq) (*response.GetUserResp, error)
	// Delete a user
	//
	// Deletes a local user.
	//
	// Authorization Action:
	// ```
	// iam:users:delete
	// ```
	DeleteUser(context.Context, *request.DeleteUserReq) (*response.DeleteUserResp, error)
	// Update a user
	//
	// Updates a local user's name or password.
	//
	// Authorization Action:
	// ```
	// iam:users:update
	// ```
	UpdateUser(context.Context, *request.UpdateUserReq) (*response.UpdateUserResp, error)
	// Update self (as user)
	//
	// Updates a local user's own name or password.
	// If changing the password, both "password" and "previous_password" are required.
	//
	// Authorization Action:
	// ```
	// iam:usersSelf:update
	// ```
	UpdateSelf(context.Context, *request.UpdateSelfReq) (*response.UpdateSelfResp, error)
}

// UnimplementedUsersServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (*UnimplementedUsersServer) CreateUser(ctx context.Context, req *request.CreateUserReq) (*response.CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUsersServer) ListUsers(ctx context.Context, req *request.ListUsersReq) (*response.ListUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedUsersServer) GetUser(ctx context.Context, req *request.GetUserReq) (*response.GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUsersServer) DeleteUser(ctx context.Context, req *request.DeleteUserReq) (*response.DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUsersServer) UpdateUser(ctx context.Context, req *request.UpdateUserReq) (*response.UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUsersServer) UpdateSelf(ctx context.Context, req *request.UpdateSelfReq) (*response.UpdateSelfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelf not implemented")
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*request.CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListUsers(ctx, req.(*request.ListUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*request.GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*request.DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*request.UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateSelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Users/UpdateSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateSelf(ctx, req.(*request.UpdateSelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Users_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateSelf",
			Handler:    _Users_UpdateSelf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/users.proto",
}
