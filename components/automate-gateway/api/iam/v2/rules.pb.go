// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/rules.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/rules.proto", fileDescriptor_28c6f49a8332221c)
}

var fileDescriptor_28c6f49a8332221c = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x1c, 0xc5, 0x35, 0xd9, 0xdd, 0xae, 0x98, 0xc3, 0x6e, 0x98, 0x0a, 0xa9, 0x98, 0x5d, 0x29, 0x1a,
	0x58, 0x51, 0x45, 0xb5, 0x5d, 0xc2, 0x2d, 0x1c, 0x20, 0x6d, 0x1d, 0x10, 0xea, 0x0f, 0x48, 0xd4,
	0x1e, 0x40, 0x55, 0x35, 0x75, 0x06, 0xd7, 0xc5, 0xf6, 0x4c, 0x3d, 0xe3, 0xb6, 0x51, 0x94, 0x0b,
	0x17, 0xa4, 0x1e, 0x38, 0x94, 0x0b, 0xff, 0x48, 0x0f, 0xdc, 0x90, 0x7a, 0x07, 0x01, 0x3d, 0xf3,
	0x43, 0xaa, 0x84, 0xc4, 0xb1, 0x12, 0x12, 0x12, 0x02, 0xa1, 0x19, 0xe7, 0x97, 0x49, 0x42, 0x5c,
	0xe8, 0x29, 0xb6, 0xbf, 0xef, 0x4d, 0x3e, 0x6f, 0x9e, 0x2d, 0x0d, 0xac, 0xb8, 0x2c, 0xe4, 0x2c,
	0xa2, 0x91, 0x14, 0x36, 0x49, 0x24, 0x0b, 0x89, 0xa4, 0xa6, 0x47, 0x24, 0x3d, 0x21, 0x6d, 0x9b,
	0x70, 0xdf, 0xf6, 0x49, 0x68, 0x1f, 0x57, 0xec, 0x38, 0x09, 0xa8, 0xb0, 0x78, 0xcc, 0x24, 0x43,
	0x0b, 0xee, 0x01, 0xfd, 0xc8, 0xea, 0xab, 0x2d, 0xc2, 0x7d, 0xcb, 0x27, 0xa1, 0x75, 0x5c, 0x31,
	0x9e, 0x78, 0x8c, 0x79, 0x01, 0xd5, 0x46, 0x12, 0x45, 0x4c, 0x12, 0xe9, 0xb3, 0xa8, 0xe7, 0x33,
	0x96, 0xf4, 0x8f, 0x6b, 0x7a, 0x34, 0x32, 0xc5, 0x09, 0xf1, 0x3c, 0x1a, 0xdb, 0x8c, 0x6b, 0xc5,
	0x04, 0x75, 0x35, 0x2f, 0x19, 0x3d, 0x4a, 0xa8, 0x90, 0xa3, 0x84, 0xc6, 0x1b, 0xb9, 0xbd, 0x82,
	0xb3, 0x48, 0xd0, 0x8c, 0xf9, 0xad, 0x89, 0xe6, 0x98, 0xbb, 0xf6, 0x08, 0x3f, 0x67, 0x81, 0xef,
	0xb6, 0xf5, 0x3a, 0x63, 0xe8, 0x95, 0x1f, 0x8a, 0xf0, 0x41, 0x43, 0xad, 0x88, 0x7e, 0xba, 0x07,
	0xe1, 0x6a, 0x4c, 0x89, 0xa4, 0xea, 0x1e, 0xbd, 0x6a, 0x4d, 0xdb, 0x3a, 0x6b, 0xa8, 0x6a, 0xd0,
	0x23, 0x63, 0x31, 0x9f, 0x50, 0x70, 0xfc, 0x57, 0xe1, 0xbc, 0xf6, 0x45, 0x01, 0x3e, 0xd0, 0x09,
	0x0e, 0x3f, 0x2b, 0xc0, 0x47, 0xa7, 0xa6, 0xcb, 0x5a, 0xd4, 0x14, 0x24, 0xe4, 0x0a, 0xe1, 0x0f,
	0x50, 0xf9, 0x1d, 0xc0, 0xdf, 0x40, 0xf9, 0x06, 0xc0, 0x47, 0xf0, 0x7e, 0x40, 0x22, 0x0f, 0xcd,
	0x19, 0xf7, 0xdf, 0x6d, 0x6e, 0x6d, 0xc2, 0x1f, 0x01, 0x9c, 0x13, 0x2c, 0x89, 0x5d, 0x8a, 0xae,
	0x80, 0xf1, 0x2d, 0xe8, 0x60, 0xbf, 0x85, 0xab, 0x25, 0x4c, 0x4f, 0xb5, 0xd9, 0x54, 0x8b, 0xe2,
	0xa5, 0x12, 0xe6, 0x31, 0x3b, 0xa4, 0xae, 0x34, 0xb3, 0xd3, 0xde, 0x53, 0x25, 0x88, 0x48, 0x48,
	0xd5, 0x68, 0xa3, 0x5d, 0x72, 0xd2, 0x69, 0xa9, 0xd1, 0xf3, 0xca, 0x36, 0xd7, 0xa3, 0xcd, 0xad,
	0x35, 0x47, 0xdd, 0xbb, 0x2c, 0x6a, 0xf9, 0x7a, 0xb7, 0x70, 0xb5, 0xf4, 0x61, 0x07, 0x13, 0x29,
	0x63, 0x7f, 0x3f, 0x91, 0x5a, 0xb4, 0xfa, 0x8e, 0x53, 0xdf, 0x6b, 0x3a, 0x8d, 0x1d, 0xa7, 0xa1,
	0xb4, 0x8c, 0xd3, 0x98, 0x48, 0x16, 0xeb, 0xa5, 0x9d, 0x8d, 0x15, 0xa7, 0xb1, 0xb7, 0x55, 0x57,
	0x83, 0x63, 0x12, 0x24, 0x54, 0x2f, 0xd0, 0xa7, 0xb1, 0x5c, 0xa6, 0x06, 0xfd, 0x3b, 0x9f, 0xe1,
	0xdd, 0xee, 0x6e, 0xf7, 0xec, 0x62, 0x61, 0x19, 0xbe, 0xe8, 0x93, 0xb0, 0xda, 0x83, 0x15, 0xd5,
	0x4e, 0xef, 0x6a, 0xcf, 0x6f, 0x75, 0xd1, 0x7c, 0x66, 0x94, 0xf0, 0x16, 0x91, 0xf4, 0x93, 0xef,
	0xaf, 0x3f, 0x2f, 0x2c, 0xe2, 0x97, 0xfb, 0x2f, 0x49, 0x7f, 0x6c, 0x8f, 0x3a, 0xd3, 0x37, 0xa6,
	0x0a, 0xca, 0xe8, 0xea, 0x1e, 0x84, 0xdb, 0xda, 0x38, 0xab, 0xe2, 0xa1, 0x6a, 0x46, 0xc5, 0xa3,
	0x42, 0xc1, 0xf1, 0x4d, 0xe1, 0xbc, 0xf6, 0xe9, 0xa0, 0xe2, 0x3f, 0xc1, 0x58, 0xc5, 0xbf, 0x82,
	0xca, 0x2f, 0x00, 0x5e, 0x83, 0xf2, 0xcf, 0xe3, 0x15, 0x7f, 0x3d, 0xac, 0xf8, 0x12, 0x18, 0x5f,
	0xdd, 0x49, 0xc5, 0x29, 0x5f, 0xeb, 0xce, 0x2b, 0x76, 0xde, 0xdf, 0xae, 0xad, 0x37, 0xa7, 0xf7,
	0xfb, 0xbf, 0x1a, 0x35, 0x8d, 0xc5, 0x1c, 0x8d, 0xda, 0x1d, 0xbf, 0xd5, 0x55, 0xb5, 0x5e, 0x02,
	0xf8, 0xf0, 0x6d, 0x2a, 0x75, 0xa7, 0xaf, 0x4c, 0xaf, 0xaa, 0x27, 0x51, 0x85, 0x3e, 0xcb, 0xa1,
	0x12, 0x1c, 0x7f, 0x7c, 0x5e, 0x7b, 0xd8, 0xeb, 0xf2, 0xec, 0x62, 0xc1, 0xfc, 0xb7, 0x2c, 0xc5,
	0xcc, 0xc8, 0xa3, 0x52, 0x07, 0x29, 0xa3, 0xdc, 0x41, 0xd0, 0x77, 0x00, 0xce, 0xaf, 0xfb, 0x42,
	0xff, 0xbb, 0xa8, 0xb3, 0xf8, 0xbd, 0x54, 0x86, 0x96, 0xa7, 0xb3, 0x4e, 0x90, 0xab, 0x74, 0xaf,
	0xdd, 0xd2, 0x21, 0x38, 0xde, 0xc9, 0x24, 0x7d, 0x06, 0x9f, 0xcf, 0x26, 0x9d, 0x9e, 0xf0, 0x29,
	0x7a, 0x69, 0x3c, 0xe1, 0x20, 0x19, 0xfa, 0x06, 0x40, 0xb8, 0x46, 0x03, 0x3a, 0xfb, 0x8b, 0x1b,
	0xaa, 0x66, 0x7c, 0x71, 0xa3, 0x42, 0xc1, 0x71, 0x94, 0x21, 0xff, 0x6f, 0xef, 0x5b, 0xb9, 0x9c,
	0xbf, 0xa6, 0x0b, 0x00, 0x1f, 0xd7, 0x38, 0x0f, 0xda, 0x7a, 0x1b, 0x9b, 0x92, 0xc4, 0x12, 0x2d,
	0x4d, 0xa7, 0xfd, 0x87, 0x54, 0x65, 0x33, 0x6f, 0xa1, 0x16, 0x1c, 0x3b, 0x99, 0x80, 0x4f, 0xe0,
	0x73, 0x2a, 0x45, 0xba, 0xbb, 0x8f, 0x07, 0x97, 0x55, 0xa2, 0x9c, 0x3a, 0xcc, 0x0b, 0x78, 0xbe,
	0x1f, 0x46, 0x3f, 0x34, 0x53, 0xed, 0x97, 0x00, 0x16, 0x87, 0xcb, 0xaf, 0x92, 0xc8, 0xa5, 0x01,
	0xca, 0x85, 0x92, 0x6a, 0x15, 0xb9, 0x75, 0x1b, 0xb9, 0xe0, 0xb8, 0x9e, 0x41, 0x7f, 0x3a, 0x8a,
	0x5e, 0x1c, 0xa2, 0xbb, 0xda, 0x90, 0xb2, 0x97, 0x73, 0xb0, 0x37, 0x25, 0x91, 0x89, 0x40, 0x79,
	0xb7, 0x51, 0x26, 0x22, 0x37, 0x7b, 0x5f, 0x9e, 0x9b, 0x5d, 0x68, 0x43, 0xca, 0x8e, 0x26, 0xb1,
	0xaf, 0xd4, 0x3e, 0x78, 0xd3, 0xf3, 0xe5, 0x41, 0xb2, 0x6f, 0xb9, 0x2c, 0xb4, 0x15, 0xc3, 0xe0,
	0xa4, 0x62, 0xe7, 0x3b, 0xfa, 0xec, 0xcf, 0xe9, 0xa3, 0xca, 0xeb, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0xb4, 0x8c, 0x19, 0x01, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RulesClient is the client API for Rules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RulesClient interface {
	// Create a project rule
	//
	// Creates a new project rule to move ingested resources into projects.
	//
	// A project rule contains conditions that determine if an ingested resource should be moved into the rule’s project.
	//
	// Each condition specifies one or more values to match for a particular attribute on an ingested resource.
	//
	// The choice of attributes depends on the rule type.
	// For NODE type, specify any of the available attributes.
	// For EVENT type, specify either CHEF_ORGANIZATION or CHEF_SERVER.
	//
	// The choice of operator depends on how many values you provide.
	// If you wish to match one among a group of values, set the operator to MEMBER_OF.
	// For a single value, use EQUALS.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	CreateRule(ctx context.Context, in *request.CreateRuleReq, opts ...grpc.CallOption) (*response.CreateRuleResp, error)
	// Update a project rule
	//
	// Updates the name and conditions of an existing project rule.
	// New conditions can be added. Existing conditions can be updated or removed.
	//
	// This operation overwrites all fields excluding ID and Type,
	// including those omitted from the request, so be sure to specify all properties.
	// Properties that you do not include are reset to empty values.
	//
	// The resulting change to the project's resources does not take effect immediately.
	// Updates to project rules must be applied to ingested resources by a project update.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	UpdateRule(ctx context.Context, in *request.UpdateRuleReq, opts ...grpc.CallOption) (*response.UpdateRuleResp, error)
	// Get a project rule
	//
	// Returns the details for a project rule.
	//
	// Authorization Action:
	// ```
	// iam:projects:get
	// ```
	GetRule(ctx context.Context, in *request.GetRuleReq, opts ...grpc.CallOption) (*response.GetRuleResp, error)
	// List a project's rules
	//
	// Lists all of the project rules of a specific project.
	//
	// Authorization Action:
	// ```
	// iam:projects:get
	// ```
	ListRulesForProject(ctx context.Context, in *request.ListRulesForProjectReq, opts ...grpc.CallOption) (*response.ListRulesForProjectResp, error)
	// Delete a project rule
	//
	// The resulting change to the project's resources does not take effect immediately.
	// Updates to project rules must be applied to ingested resources by a project update.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	DeleteRule(ctx context.Context, in *request.DeleteRuleReq, opts ...grpc.CallOption) (*response.DeleteRuleResp, error)
	// Start project update
	//
	// Any changes to a project's rules are staged first. They do not take effect until
	// all projects are updated.
	//
	// Updating all projects begins an operation that applies all pending rule edits
	// and then moves ingested resources into the correct projects according to those latest changes.
	//
	// With a large amount of historical compliance data, rule application can take a considerable amount of time.
	// It’s best to batch up rule changes and apply them all at once.
	//
	// Authorization Action:
	// ```
	// iam:rules:apply
	// ```
	ApplyRulesStart(ctx context.Context, in *request.ApplyRulesStartReq, opts ...grpc.CallOption) (*response.ApplyRulesStartResp, error)
	// Cancel project update
	//
	// Cancels an ongoing project update.
	//
	// Warning! This action leaves the system in an unknown state that only another
	// successful project update can rectify.
	//
	// This command exists really just for one scenario: you started a project update
	// but shortly thereafter discovered that you had one more change to include in the
	// batch of updates to be done.
	//
	// Authorization Action:
	// ```
	// iam:rules:cancel
	// ```
	ApplyRulesCancel(ctx context.Context, in *request.ApplyRulesCancelReq, opts ...grpc.CallOption) (*response.ApplyRulesCancelResp, error)
	// Get the status of a project update
	//
	// Returns details about a project update operation.
	//
	// You can poll this endpoint during a project update to monitor progress.
	// Querying this endpoint when there is no update in progress will return details
	// about the completion status of the most recent update.
	//
	// Authorization Action:
	// ```
	// iam:rules:status
	// ```
	ApplyRulesStatus(ctx context.Context, in *request.ApplyRulesStatusReq, opts ...grpc.CallOption) (*response.ApplyRulesStatusResp, error)
}

type rulesClient struct {
	cc grpc.ClientConnInterface
}

func NewRulesClient(cc grpc.ClientConnInterface) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) CreateRule(ctx context.Context, in *request.CreateRuleReq, opts ...grpc.CallOption) (*response.CreateRuleResp, error) {
	out := new(response.CreateRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) UpdateRule(ctx context.Context, in *request.UpdateRuleReq, opts ...grpc.CallOption) (*response.UpdateRuleResp, error) {
	out := new(response.UpdateRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) GetRule(ctx context.Context, in *request.GetRuleReq, opts ...grpc.CallOption) (*response.GetRuleResp, error) {
	out := new(response.GetRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ListRulesForProject(ctx context.Context, in *request.ListRulesForProjectReq, opts ...grpc.CallOption) (*response.ListRulesForProjectResp, error) {
	out := new(response.ListRulesForProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/ListRulesForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) DeleteRule(ctx context.Context, in *request.DeleteRuleReq, opts ...grpc.CallOption) (*response.DeleteRuleResp, error) {
	out := new(response.DeleteRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ApplyRulesStart(ctx context.Context, in *request.ApplyRulesStartReq, opts ...grpc.CallOption) (*response.ApplyRulesStartResp, error) {
	out := new(response.ApplyRulesStartResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/ApplyRulesStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ApplyRulesCancel(ctx context.Context, in *request.ApplyRulesCancelReq, opts ...grpc.CallOption) (*response.ApplyRulesCancelResp, error) {
	out := new(response.ApplyRulesCancelResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/ApplyRulesCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ApplyRulesStatus(ctx context.Context, in *request.ApplyRulesStatusReq, opts ...grpc.CallOption) (*response.ApplyRulesStatusResp, error) {
	out := new(response.ApplyRulesStatusResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Rules/ApplyRulesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServer is the server API for Rules service.
type RulesServer interface {
	// Create a project rule
	//
	// Creates a new project rule to move ingested resources into projects.
	//
	// A project rule contains conditions that determine if an ingested resource should be moved into the rule’s project.
	//
	// Each condition specifies one or more values to match for a particular attribute on an ingested resource.
	//
	// The choice of attributes depends on the rule type.
	// For NODE type, specify any of the available attributes.
	// For EVENT type, specify either CHEF_ORGANIZATION or CHEF_SERVER.
	//
	// The choice of operator depends on how many values you provide.
	// If you wish to match one among a group of values, set the operator to MEMBER_OF.
	// For a single value, use EQUALS.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	CreateRule(context.Context, *request.CreateRuleReq) (*response.CreateRuleResp, error)
	// Update a project rule
	//
	// Updates the name and conditions of an existing project rule.
	// New conditions can be added. Existing conditions can be updated or removed.
	//
	// This operation overwrites all fields excluding ID and Type,
	// including those omitted from the request, so be sure to specify all properties.
	// Properties that you do not include are reset to empty values.
	//
	// The resulting change to the project's resources does not take effect immediately.
	// Updates to project rules must be applied to ingested resources by a project update.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	UpdateRule(context.Context, *request.UpdateRuleReq) (*response.UpdateRuleResp, error)
	// Get a project rule
	//
	// Returns the details for a project rule.
	//
	// Authorization Action:
	// ```
	// iam:projects:get
	// ```
	GetRule(context.Context, *request.GetRuleReq) (*response.GetRuleResp, error)
	// List a project's rules
	//
	// Lists all of the project rules of a specific project.
	//
	// Authorization Action:
	// ```
	// iam:projects:get
	// ```
	ListRulesForProject(context.Context, *request.ListRulesForProjectReq) (*response.ListRulesForProjectResp, error)
	// Delete a project rule
	//
	// The resulting change to the project's resources does not take effect immediately.
	// Updates to project rules must be applied to ingested resources by a project update.
	//
	// Authorization Action:
	// ```
	// iam:projects:update
	// ```
	DeleteRule(context.Context, *request.DeleteRuleReq) (*response.DeleteRuleResp, error)
	// Start project update
	//
	// Any changes to a project's rules are staged first. They do not take effect until
	// all projects are updated.
	//
	// Updating all projects begins an operation that applies all pending rule edits
	// and then moves ingested resources into the correct projects according to those latest changes.
	//
	// With a large amount of historical compliance data, rule application can take a considerable amount of time.
	// It’s best to batch up rule changes and apply them all at once.
	//
	// Authorization Action:
	// ```
	// iam:rules:apply
	// ```
	ApplyRulesStart(context.Context, *request.ApplyRulesStartReq) (*response.ApplyRulesStartResp, error)
	// Cancel project update
	//
	// Cancels an ongoing project update.
	//
	// Warning! This action leaves the system in an unknown state that only another
	// successful project update can rectify.
	//
	// This command exists really just for one scenario: you started a project update
	// but shortly thereafter discovered that you had one more change to include in the
	// batch of updates to be done.
	//
	// Authorization Action:
	// ```
	// iam:rules:cancel
	// ```
	ApplyRulesCancel(context.Context, *request.ApplyRulesCancelReq) (*response.ApplyRulesCancelResp, error)
	// Get the status of a project update
	//
	// Returns details about a project update operation.
	//
	// You can poll this endpoint during a project update to monitor progress.
	// Querying this endpoint when there is no update in progress will return details
	// about the completion status of the most recent update.
	//
	// Authorization Action:
	// ```
	// iam:rules:status
	// ```
	ApplyRulesStatus(context.Context, *request.ApplyRulesStatusReq) (*response.ApplyRulesStatusResp, error)
}

// UnimplementedRulesServer can be embedded to have forward compatible implementations.
type UnimplementedRulesServer struct {
}

func (*UnimplementedRulesServer) CreateRule(ctx context.Context, req *request.CreateRuleReq) (*response.CreateRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedRulesServer) UpdateRule(ctx context.Context, req *request.UpdateRuleReq) (*response.UpdateRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedRulesServer) GetRule(ctx context.Context, req *request.GetRuleReq) (*response.GetRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (*UnimplementedRulesServer) ListRulesForProject(ctx context.Context, req *request.ListRulesForProjectReq) (*response.ListRulesForProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRulesForProject not implemented")
}
func (*UnimplementedRulesServer) DeleteRule(ctx context.Context, req *request.DeleteRuleReq) (*response.DeleteRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedRulesServer) ApplyRulesStart(ctx context.Context, req *request.ApplyRulesStartReq) (*response.ApplyRulesStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRulesStart not implemented")
}
func (*UnimplementedRulesServer) ApplyRulesCancel(ctx context.Context, req *request.ApplyRulesCancelReq) (*response.ApplyRulesCancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRulesCancel not implemented")
}
func (*UnimplementedRulesServer) ApplyRulesStatus(ctx context.Context, req *request.ApplyRulesStatusReq) (*response.ApplyRulesStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRulesStatus not implemented")
}

func RegisterRulesServer(s *grpc.Server, srv RulesServer) {
	s.RegisterService(&_Rules_serviceDesc, srv)
}

func _Rules_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).CreateRule(ctx, req.(*request.CreateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).UpdateRule(ctx, req.(*request.UpdateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).GetRule(ctx, req.(*request.GetRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ListRulesForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRulesForProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ListRulesForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/ListRulesForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ListRulesForProject(ctx, req.(*request.ListRulesForProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).DeleteRule(ctx, req.(*request.DeleteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ApplyRulesStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ApplyRulesStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ApplyRulesStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/ApplyRulesStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ApplyRulesStart(ctx, req.(*request.ApplyRulesStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ApplyRulesCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ApplyRulesCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ApplyRulesCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/ApplyRulesCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ApplyRulesCancel(ctx, req.(*request.ApplyRulesCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ApplyRulesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ApplyRulesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ApplyRulesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Rules/ApplyRulesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ApplyRulesStatus(ctx, req.(*request.ApplyRulesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _Rules_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _Rules_UpdateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _Rules_GetRule_Handler,
		},
		{
			MethodName: "ListRulesForProject",
			Handler:    _Rules_ListRulesForProject_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _Rules_DeleteRule_Handler,
		},
		{
			MethodName: "ApplyRulesStart",
			Handler:    _Rules_ApplyRulesStart_Handler,
		},
		{
			MethodName: "ApplyRulesCancel",
			Handler:    _Rules_ApplyRulesCancel_Handler,
		},
		{
			MethodName: "ApplyRulesStatus",
			Handler:    _Rules_ApplyRulesStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/rules.proto",
}
