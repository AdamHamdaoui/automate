// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/policy.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/policy.proto", fileDescriptor_2710c589a501c81d)
}

var fileDescriptor_2710c589a501c81d = []byte{
	// 1508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x88, 0x1c, 0xc5,
	0x17, 0xa7, 0xe7, 0xff, 0xcf, 0x7e, 0x54, 0x76, 0x93, 0xdd, 0xb7, 0x1f, 0xe9, 0xf4, 0x26, 0x86,
	0x94, 0xf9, 0x1c, 0xb3, 0x33, 0xd9, 0x4d, 0xf0, 0x30, 0x0a, 0x66, 0x35, 0x10, 0x14, 0x05, 0x59,
	0x92, 0x20, 0x73, 0x59, 0x7a, 0x67, 0xca, 0xd9, 0x8e, 0x33, 0xd3, 0x95, 0xae, 0xde, 0x8d, 0x4b,
	0xf0, 0x32, 0x01, 0x25, 0x83, 0x22, 0x6c, 0xf0, 0xe4, 0xc9, 0xab, 0xd7, 0xd0, 0x17, 0x0f, 0x41,
	0x3c, 0x08, 0x82, 0x28, 0x28, 0x78, 0xf2, 0xe8, 0xcd, 0x93, 0x07, 0x51, 0x3c, 0x49, 0xf5, 0x67,
	0xd5, 0xf4, 0x47, 0xf5, 0x2c, 0x78, 0x5a, 0xf6, 0xd5, 0xaf, 0x7a, 0xea, 0xf7, 0x7b, 0xef, 0x55,
	0xbd, 0xf7, 0xd0, 0xb5, 0x96, 0xdd, 0xa3, 0x76, 0x9f, 0xf4, 0x5d, 0x56, 0x37, 0x77, 0x5d, 0xbb,
	0x67, 0xba, 0x64, 0xb5, 0x63, 0xba, 0xe4, 0x81, 0xb9, 0x5f, 0x37, 0xa9, 0x55, 0xb7, 0xcc, 0x5e,
	0x7d, 0x6f, 0xbd, 0x4e, 0xed, 0xae, 0xd5, 0xda, 0xaf, 0x51, 0xc7, 0x76, 0x6d, 0xd0, 0x5b, 0x3b,
	0xe4, 0xdd, 0x5a, 0x04, 0xaf, 0x99, 0xd4, 0xaa, 0x59, 0x66, 0xaf, 0xb6, 0xb7, 0x6e, 0x9c, 0xea,
	0xd8, 0x76, 0xa7, 0x4b, 0xfc, 0x9d, 0x66, 0xbf, 0x6f, 0xbb, 0xa6, 0x6b, 0xd9, 0x7d, 0x16, 0xec,
	0x33, 0xae, 0xf8, 0x7f, 0x5a, 0xab, 0x1d, 0xd2, 0x5f, 0x65, 0x0f, 0xcc, 0x4e, 0x87, 0x38, 0x75,
	0x9b, 0xfa, 0x88, 0x0c, 0xf4, 0x4b, 0x25, 0x8f, 0xe6, 0x90, 0xfb, 0xbb, 0x84, 0xb9, 0xd2, 0x11,
	0x8d, 0x97, 0x4b, 0x6f, 0x66, 0xd4, 0xee, 0x33, 0x22, 0xef, 0xbe, 0x91, 0xb9, 0xdb, 0xa1, 0xad,
	0xba, 0xc0, 0x20, 0xd8, 0x91, 0x43, 0x75, 0x9c, 0x2f, 0xf0, 0xa3, 0xa4, 0xbe, 0xb0, 0xfe, 0xcf,
	0x2a, 0x9a, 0x7a, 0x9b, 0x03, 0x2c, 0xc2, 0xe0, 0x4f, 0x0d, 0xcd, 0xbc, 0xe6, 0x10, 0xd3, 0x25,
	0xbe, 0x69, 0x1f, 0x2e, 0xd7, 0xf2, 0x7c, 0x50, 0x13, 0x71, 0x9b, 0xe4, 0xbe, 0x51, 0x2d, 0x0b,
	0x65, 0x14, 0x7f, 0xa2, 0x1d, 0x6c, 0x20, 0x34, 0x45, 0xc3, 0xdf, 0x1d, 0x78, 0xfa, 0x71, 0x34,
	0x6b, 0xee, 0xba, 0x3b, 0x0d, 0xc1, 0x34, 0x05, 0x13, 0x2d, 0x7f, 0xe3, 0xd0, 0xd3, 0x8f, 0xa1,
	0x19, 0xcb, 0xec, 0xc5, 0xab, 0x43, 0x4f, 0x5f, 0x82, 0x05, 0xd1, 0xd2, 0x08, 0xa0, 0x83, 0x9f,
	0x7f, 0x7b, 0x52, 0xb9, 0x8a, 0xe7, 0xa4, 0x78, 0xe2, 0xcb, 0x5a, 0xb5, 0x79, 0x12, 0x2f, 0x86,
	0xe6, 0x6d, 0xe2, 0x9a, 0xe2, 0x12, 0xfc, 0xa2, 0xa1, 0xe9, 0x5b, 0xc4, 0x0d, 0x49, 0x5f, 0xc8,
	0x67, 0x12, 0x83, 0x38, 0xe3, 0x8b, 0xa5, 0x70, 0x8c, 0xe2, 0xf7, 0x47, 0xd9, 0x2e, 0x22, 0x90,
	0xd8, 0x36, 0x1e, 0x5a, 0xed, 0x0f, 0x06, 0x9e, 0x7e, 0x04, 0xfe, 0xd7, 0x21, 0xee, 0xd0, 0xd3,
	0x17, 0xd0, 0xbc, 0xc4, 0x8e, 0xaf, 0x0f, 0x3d, 0x1d, 0x60, 0x4e, 0x32, 0x77, 0x88, 0xeb, 0x33,
	0x3e, 0x01, 0x4b, 0xa3, 0x8c, 0xeb, 0x7c, 0x0b, 0xfc, 0xa4, 0xa1, 0x99, 0x37, 0x2d, 0xe6, 0xc6,
	0x1e, 0x2e, 0x70, 0xa8, 0x88, 0x53, 0x38, 0x54, 0x86, 0x32, 0x8a, 0xdf, 0x2b, 0xe1, 0xcf, 0x09,
	0xf8, 0xbf, 0x43, 0xcc, 0x76, 0xa6, 0x37, 0x17, 0x40, 0xe6, 0xdb, 0xb5, 0x58, 0xc0, 0x0c, 0x20,
	0xe5, 0x4b, 0x78, 0x54, 0x41, 0x33, 0x37, 0x49, 0x97, 0x94, 0x89, 0x52, 0x11, 0xa7, 0x20, 0x25,
	0x43, 0x19, 0xc5, 0x9f, 0x6b, 0x65, 0xfd, 0x36, 0x05, 0x13, 0x6d, 0x7f, 0x77, 0xbe, 0xeb, 0x46,
	0xe3, 0x35, 0xc0, 0xfb, 0x1c, 0xaf, 0x57, 0xb3, 0xbd, 0xd7, 0x5c, 0xa9, 0x9e, 0xcc, 0x8a, 0xd8,
	0xc0, 0xb5, 0x8f, 0x2b, 0x68, 0xe6, 0x0e, 0x6d, 0x97, 0xca, 0x55, 0x11, 0xa7, 0x50, 0x41, 0x86,
	0x32, 0x8a, 0xbf, 0x18, 0x47, 0x85, 0x5d, 0x7f, 0x77, 0x79, 0x15, 0x02, 0xbc, 0xaf, 0x42, 0xc3,
	0xc8, 0x56, 0x81, 0xa7, 0xee, 0x73, 0x46, 0xbe, 0x10, 0x3c, 0x7f, 0x3f, 0xaa, 0xa0, 0xb9, 0x38,
	0xe5, 0xee, 0x12, 0x87, 0x59, 0x76, 0x1f, 0x56, 0x4b, 0xa4, 0x67, 0x88, 0xe5, 0x9a, 0xd4, 0xc6,
	0x81, 0x33, 0x8a, 0x9f, 0x68, 0x63, 0xc5, 0xbc, 0x28, 0x48, 0xf4, 0x9d, 0x82, 0x8c, 0x7e, 0x11,
	0x96, 0xe5, 0x37, 0x71, 0x6b, 0x2f, 0xd8, 0xd3, 0x3c, 0x05, 0x46, 0x4a, 0x8b, 0x78, 0x15, 0xbe,
	0xac, 0xa0, 0xf9, 0x38, 0x3b, 0xf7, 0xdf, 0x22, 0xbd, 0x6d, 0xe2, 0x30, 0xa8, 0x95, 0x48, 0xe5,
	0x08, 0xcc, 0xb5, 0xa8, 0x8f, 0x85, 0x67, 0x14, 0x3f, 0x2d, 0x1d, 0x24, 0x89, 0x22, 0x2b, 0xe8,
	0x64, 0x2a, 0x44, 0x1a, 0xbd, 0xe0, 0xa3, 0x43, 0x4f, 0x3f, 0x01, 0x4b, 0x89, 0x60, 0xe1, 0x6f,
	0xc5, 0xf2, 0xdc, 0x84, 0xd3, 0x99, 0xc1, 0x52, 0x0f, 0xf7, 0x37, 0x9f, 0x87, 0xb3, 0xb9, 0x11,
	0x13, 0x81, 0xe0, 0x59, 0x05, 0x2d, 0x6e, 0x12, 0xda, 0x35, 0x5b, 0x44, 0xd6, 0x6b, 0x2d, 0x9f,
	0x7f, 0x16, 0x9e, 0x4b, 0xb6, 0x3e, 0xee, 0x16, 0x46, 0xf1, 0xb3, 0x43, 0xa5, 0x96, 0x42, 0x37,
	0x03, 0xf4, 0xb4, 0x6e, 0x42, 0x9e, 0xbd, 0x61, 0x14, 0x4b, 0xc7, 0xf3, 0xed, 0x82, 0xa1, 0x56,
	0x8f, 0xe7, 0xdd, 0x77, 0x15, 0xb4, 0xb0, 0x49, 0x7a, 0xf6, 0xde, 0x88, 0x7e, 0x57, 0x8b, 0xc4,
	0x48, 0xc1, 0xb9, 0x7c, 0x6b, 0x63, 0xee, 0x60, 0x14, 0x7f, 0x7f, 0xa8, 0xeb, 0xf9, 0x30, 0xea,
	0x09, 0x77, 0xf5, 0x3b, 0xf8, 0x5c, 0xb1, 0x7a, 0x8e, 0x7f, 0x5a, 0x2e, 0xe2, 0x2a, 0xbe, 0xa4,
	0x16, 0x31, 0x86, 0xc3, 0x57, 0x15, 0x34, 0xb7, 0xd1, 0x6e, 0xcb, 0x42, 0x16, 0xdc, 0x61, 0xa3,
	0x58, 0xc5, 0x1d, 0x96, 0x86, 0x33, 0x8a, 0xbf, 0x1d, 0x47, 0xc2, 0xb8, 0x18, 0x3b, 0x8c, 0x84,
	0x42, 0x79, 0xb6, 0x89, 0xcf, 0x16, 0x4b, 0x68, 0xb6, 0xdb, 0x5c, 0xbf, 0x2a, 0x3e, 0xaf, 0xd6,
	0x2f, 0xc0, 0xc2, 0xaf, 0x1a, 0x42, 0x41, 0x95, 0xb9, 0x69, 0x77, 0x09, 0x5c, 0x54, 0xd5, 0xa2,
	0x1c, 0xc5, 0x05, 0xbb, 0x54, 0x0e, 0xc8, 0x28, 0x7e, 0x78, 0xb0, 0x31, 0x89, 0x8e, 0x38, 0x76,
	0xd7, 0x97, 0x69, 0x06, 0x21, 0x5f, 0xa6, 0xe8, 0x7f, 0x51, 0x9e, 0xa3, 0x68, 0x9a, 0xf3, 0xf7,
	0x97, 0x92, 0x1b, 0xde, 0xff, 0x57, 0x94, 0xa1, 0x8a, 0x67, 0xe3, 0xee, 0xc0, 0x5f, 0xd3, 0xaa,
	0xcd, 0x65, 0x3c, 0x2f, 0x52, 0x8e, 0xec, 0xf0, 0xa3, 0x86, 0xa6, 0xf9, 0xc5, 0xcb, 0x4f, 0xc3,
	0x8a, 0xea, 0xd3, 0x18, 0xa4, 0xa8, 0x4f, 0x05, 0x1c, 0xa3, 0xf8, 0x7e, 0x21, 0xb7, 0xe4, 0xc6,
	0x1e, 0x61, 0x36, 0x07, 0xc7, 0x12, 0x66, 0x71, 0xc5, 0x76, 0x0e, 0x64, 0x5e, 0xcd, 0x05, 0x48,
	0x93, 0xe2, 0x0e, 0x9b, 0xbc, 0x45, 0xfc, 0x33, 0xc0, 0xb9, 0xc2, 0x97, 0x37, 0x72, 0xd5, 0xf9,
	0x12, 0x28, 0x46, 0xf1, 0x23, 0x4d, 0x22, 0x33, 0x8f, 0x8e, 0x27, 0x64, 0x52, 0x65, 0xf6, 0x1c,
	0x12, 0x18, 0x84, 0x25, 0xca, 0x71, 0x98, 0x4d, 0x6c, 0xd1, 0x7b, 0x53, 0x03, 0x90, 0x48, 0x05,
	0xf5, 0x99, 0x1e, 0x3f, 0xd2, 0x09, 0xb3, 0xa0, 0x38, 0xfb, 0x5d, 0x43, 0x28, 0xa8, 0x27, 0x55,
	0xf1, 0x98, 0xa0, 0x14, 0xf1, 0x28, 0x02, 0x19, 0xc5, 0x8f, 0x4b, 0xf0, 0x14, 0xef, 0xbd, 0x2c,
	0xaa, 0x52, 0x68, 0x0a, 0x97, 0x5c, 0xad, 0x9a, 0xc9, 0xb6, 0x9a, 0xc7, 0xf6, 0x0f, 0x0d, 0xa1,
	0xa0, 0x6e, 0x54, 0xb1, 0x4d, 0x50, 0x0a, 0xb6, 0x22, 0x90, 0x51, 0xfc, 0x69, 0x39, 0xb6, 0xf1,
	0x1b, 0xa9, 0x64, 0x2b, 0x3c, 0x88, 0xd7, 0x8d, 0x0c, 0xb6, 0x3c, 0x1b, 0x57, 0x8c, 0x1c, 0xc2,
	0x3c, 0x25, 0xff, 0xd6, 0xd0, 0x6c, 0xd8, 0xd7, 0x3a, 0xf6, 0x3d, 0xd2, 0x72, 0x41, 0xdd, 0x00,
	0x07, 0x40, 0xce, 0xfc, 0x85, 0xd2, 0x58, 0xa1, 0x5b, 0x0e, 0x4c, 0x52, 0xa5, 0x99, 0x98, 0xb2,
	0xba, 0xe5, 0x70, 0x55, 0xa8, 0xbb, 0x43, 0x4b, 0x5e, 0xb7, 0x1c, 0x2d, 0x67, 0x74, 0xcb, 0xc9,
	0x12, 0x7c, 0x5c, 0x41, 0xb3, 0x61, 0x9b, 0xa0, 0xa6, 0x2e, 0x01, 0x15, 0xd4, 0x47, 0xb0, 0x42,
	0xf3, 0x91, 0xf0, 0x8c, 0x1f, 0xa8, 0xe8, 0x40, 0x05, 0xcd, 0x87, 0x08, 0xc9, 0x10, 0x21, 0xa7,
	0xf9, 0x08, 0x97, 0x73, 0x9b, 0x8f, 0x91, 0x75, 0xf8, 0x4b, 0x43, 0x88, 0x77, 0x08, 0xa1, 0x16,
	0x8a, 0xa9, 0x40, 0x22, 0xc4, 0xa5, 0x72, 0x40, 0x46, 0xf1, 0x67, 0xa5, 0x55, 0x48, 0x0d, 0x10,
	0x46, 0x24, 0x88, 0xda, 0x8d, 0xc8, 0x1c, 0xdd, 0x6f, 0xd7, 0x21, 0x9b, 0x7f, 0x73, 0x05, 0xf2,
	0xc9, 0xf3, 0x5b, 0x2e, 0x98, 0x2e, 0x84, 0x56, 0xe5, 0x74, 0x21, 0xc4, 0x95, 0x99, 0x2e, 0xc4,
	0xd0, 0xf0, 0x4e, 0x57, 0x26, 0x40, 0x7a, 0xbc, 0x90, 0x84, 0x7f, 0x34, 0x5e, 0x88, 0x68, 0xc7,
	0x8f, 0x55, 0x15, 0x52, 0xc1, 0xdf, 0x5c, 0x86, 0xcc, 0xc8, 0x87, 0x0f, 0x2b, 0x68, 0x36, 0x9c,
	0x11, 0xa8, 0xc3, 0x5e, 0x02, 0x2a, 0xc2, 0x7e, 0x04, 0x2b, 0x4c, 0x1e, 0x4a, 0x85, 0x7d, 0x6a,
	0xf2, 0xa0, 0x08, 0xfb, 0x9c, 0xc9, 0x83, 0xec, 0xf6, 0x6a, 0x81, 0xdb, 0x7f, 0xd0, 0xd0, 0xd1,
	0x3b, 0xb4, 0xe3, 0x98, 0x6d, 0x72, 0xdb, 0xbe, 0xbb, 0x0e, 0x85, 0xd7, 0x78, 0x0c, 0xe3, 0x22,
	0x5c, 0x2e, 0x89, 0x64, 0x14, 0xdf, 0x3b, 0xd8, 0x98, 0x42, 0x13, 0x3b, 0x56, 0xbb, 0x4d, 0xfa,
	0x03, 0x4f, 0x37, 0x90, 0xce, 0xf6, 0x99, 0x4b, 0x7a, 0x0d, 0xce, 0x65, 0x37, 0x00, 0x6f, 0xb9,
	0xf6, 0xd6, 0xde, 0xfa, 0xc0, 0xd3, 0xa7, 0x61, 0x32, 0x34, 0x0d, 0x3d, 0x5d, 0x47, 0xcb, 0x69,
	0x28, 0xff, 0xee, 0xd0, 0xd3, 0x17, 0x01, 0xd2, 0x6b, 0xf0, 0xb5, 0x86, 0xa6, 0x37, 0x09, 0x23,
	0xee, 0x6d, 0xfb, 0xee, 0x5a, 0x51, 0x79, 0x15, 0x83, 0x14, 0xe5, 0x95, 0x80, 0x63, 0x14, 0x6f,
	0xcb, 0x54, 0xe4, 0xf3, 0x39, 0x1c, 0xea, 0x13, 0x59, 0x1b, 0x78, 0xfa, 0x24, 0x1c, 0xf1, 0x0d,
	0x43, 0x4f, 0x5f, 0x46, 0x8b, 0xa3, 0x30, 0xfe, 0xc5, 0x20, 0x89, 0x47, 0x57, 0xe0, 0x69, 0x05,
	0x2d, 0xbd, 0xde, 0x77, 0x1d, 0x9b, 0x51, 0xd2, 0x72, 0x37, 0xba, 0xdd, 0xff, 0x3a, 0x27, 0xbf,
	0xd1, 0x64, 0x56, 0x57, 0x50, 0x95, 0x07, 0xe8, 0x96, 0x15, 0x1f, 0xc2, 0xb2, 0xfb, 0x8d, 0xe4,
	0xbf, 0x2d, 0xb3, 0xdb, 0xdd, 0xca, 0x4c, 0xd7, 0xf0, 0xad, 0x4e, 0xa0, 0x43, 0x4f, 0x3f, 0x03,
	0xa7, 0x65, 0x1b, 0xbf, 0xa9, 0x04, 0x56, 0x7e, 0xf4, 0xde, 0x80, 0x95, 0x28, 0x7a, 0x85, 0xdf,
	0x89, 0xf3, 0xf8, 0x2c, 0x9c, 0x11, 0x63, 0x38, 0x03, 0xf2, 0xea, 0x46, 0xf3, 0x95, 0x8e, 0xe5,
	0xee, 0xec, 0x6e, 0xd7, 0x5a, 0x76, 0xaf, 0xce, 0xc9, 0xc7, 0x53, 0xf4, 0x7a, 0xb9, 0xc9, 0xfe,
	0xf6, 0x84, 0x3f, 0x46, 0xbf, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x4d, 0x80, 0x02,
	0xe2, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PoliciesClient is the client API for Policies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoliciesClient interface {
	//
	//Create a new policy
	//
	//Use Chef Automate IAM uses multi-statement policies to support complex permissions in a single policy.
	//
	//Policies are based on projects. Projects group and define the rules for access to Chef Automate resources and data, specifically Compliance reports, Chef Server events, and Infrastructure nodes.
	//
	//A policy is made up of one or more statements that grant permissions to a set of members.
	//Each statement is made up of a role as well as a list of projects.
	//
	//A role defines the set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//A policy's top-level projects list defines which project(s) the policy belongs to (for filtering policies by their projects),
	//whereas the statement level projects list defines which project(s) the statement applies to.
	//
	//This example creates a new policy not associated with any project (because the top-level `projects` property is empty) that grants the `viewer` role
	//on a few projects for all LDAP teams and a custom role `qa` on a specific project:
	//
	//```
	//{
	//"name": "Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//},
	//{
	//"role": "qa",
	//"projects": ["acceptanceProject"]
	//}
	//],
	//"projects": []
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//iam:policies:create
	//```
	CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error)
	//
	//Get a policy
	//
	//Get a policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:get
	//```
	GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error)
	//
	//List all policies
	//
	//List all policies.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:list
	//```
	ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error)
	//
	//Delete a policy
	//
	//Delete a policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:delete
	//```
	DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error)
	//
	//Update an existing policy
	//
	//When updating a policy you must supply all of that policy's properties, not just the ones you wish to update.
	//Properties that you do not include are reset to empty values!
	//The only exception is the policy ID, which is immutable; it can only be set at creation time.
	//
	//You can use this endpoint to modify Custom policies but not Chef-managed policies.
	//
	//While you can use this endpoint to update members on a policy, if that is the only
	//property you wish to modify (on either Custom or Chef-managed policies),
	//you might find it more convenient to use these endpoints instead:
	//Add policy members
	//Remove policy members
	//Replace policy members
	//
	//Authorization Action:
	//
	//```
	//iam:policies:update
	//```
	UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:get
	//```
	GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:get
	//```
	ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list for a specific policy with a new list.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:update
	//```
	ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove specific members from the member list for a specific policy. Silently ignores
	//members that are not already part of the member list.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//The removed members will still exist within Chef Automate, but are no longer associated with this policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:delete
	//```
	RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add specific members to the member list for a specific policy.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:create
	//```
	AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error)
	//
	//Create a new role
	//
	//Creates a new role to be used in the policies that control permissions in Automate.
	//
	//A role defines the scope of actions in a policy statement.
	//
	//There are several default *Chef-managed* roles that are essential to the operation of Chef Automate
	//and cannot be altered.
	//Roles that you create are *Custom* roles, and you have full control about modifying or deleting them.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:create
	//```
	CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error)
	//
	//List all roles
	//
	//List all *Chef-managed* and *Custom* roles.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:list
	//```
	ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error)
	//
	//Get a role
	//
	//Get a role.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:get
	//```
	GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error)
	//
	//Delete a role
	//
	//Delete a specified role and removes it from any statements that may have been using it.
	//If such a statement has no other associated actions, the statement is deleted as well.
	//Similarly, if that statement removal results in a policy with no other statements,
	//that policy is removed as well.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:delete
	//```
	DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error)
	//
	//Update a role
	//
	//When updating a role supply all of a role's properties, not just the ones you wish to update.
	//Properties that you do not include are reset to empty values.
	//The only exception is the role ID, which is immutable; it can only be set at creation time.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:update
	//```
	UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the policies that control permissions in Automate.
	//
	//A project defines the scope of resources in a policy statement. Resources can be in more than one project.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:create
	//```
	CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Update an existing project. Very similar to create except the ID cannot be changed.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:update
	//```
	UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error)
	//
	//Get a project
	//
	//Get a project.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:get
	//```
	GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error)
	//
	//List all projects
	//
	//List all projects.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:list
	//```
	ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Deletes the project from any resources tagged with it.
	//
	//Also deletes this project from any project list in all statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:delete
	//```
	DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error)
	ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
}

type policiesClient struct {
	cc *grpc.ClientConn
}

func NewPoliciesClient(cc *grpc.ClientConn) PoliciesClient {
	return &policiesClient{cc}
}

func (c *policiesClient) CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error) {
	out := new(response.CreatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error) {
	out := new(response.GetPolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error) {
	out := new(response.ListPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error) {
	out := new(response.DeletePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error) {
	out := new(response.UpdatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error) {
	out := new(response.GetPolicyVersionResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error) {
	out := new(response.ListPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error) {
	out := new(response.ReplacePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error) {
	out := new(response.RemovePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error) {
	out := new(response.AddPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/AddPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error) {
	out := new(response.CreateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error) {
	out := new(response.ListRolesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error) {
	out := new(response.GetRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error) {
	out := new(response.DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error) {
	out := new(response.UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error) {
	out := new(response.CreateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error) {
	out := new(response.UpdateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error) {
	out := new(response.GetProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error) {
	out := new(response.DeleteProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error) {
	out := new(response.UpgradeToV2Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpgradeToV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error) {
	out := new(response.ResetToV1Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ResetToV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServer is the server API for Policies service.
type PoliciesServer interface {
	//
	//Create a new policy
	//
	//Use Chef Automate IAM uses multi-statement policies to support complex permissions in a single policy.
	//
	//Policies are based on projects. Projects group and define the rules for access to Chef Automate resources and data, specifically Compliance reports, Chef Server events, and Infrastructure nodes.
	//
	//A policy is made up of one or more statements that grant permissions to a set of members.
	//Each statement is made up of a role as well as a list of projects.
	//
	//A role defines the set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//A policy's top-level projects list defines which project(s) the policy belongs to (for filtering policies by their projects),
	//whereas the statement level projects list defines which project(s) the statement applies to.
	//
	//This example creates a new policy not associated with any project (because the top-level `projects` property is empty) that grants the `viewer` role
	//on a few projects for all LDAP teams and a custom role `qa` on a specific project:
	//
	//```
	//{
	//"name": "Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//},
	//{
	//"role": "qa",
	//"projects": ["acceptanceProject"]
	//}
	//],
	//"projects": []
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//iam:policies:create
	//```
	CreatePolicy(context.Context, *request.CreatePolicyReq) (*response.CreatePolicyResp, error)
	//
	//Get a policy
	//
	//Get a policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:get
	//```
	GetPolicy(context.Context, *request.GetPolicyReq) (*response.GetPolicyResp, error)
	//
	//List all policies
	//
	//List all policies.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:list
	//```
	ListPolicies(context.Context, *request.ListPoliciesReq) (*response.ListPoliciesResp, error)
	//
	//Delete a policy
	//
	//Delete a policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:delete
	//```
	DeletePolicy(context.Context, *request.DeletePolicyReq) (*response.DeletePolicyResp, error)
	//
	//Update an existing policy
	//
	//When updating a policy you must supply all of that policy's properties, not just the ones you wish to update.
	//Properties that you do not include are reset to empty values!
	//The only exception is the policy ID, which is immutable; it can only be set at creation time.
	//
	//You can use this endpoint to modify Custom policies but not Chef-managed policies.
	//
	//While you can use this endpoint to update members on a policy, if that is the only
	//property you wish to modify (on either Custom or Chef-managed policies),
	//you might find it more convenient to use these endpoints instead:
	//Add policy members
	//Remove policy members
	//Replace policy members
	//
	//Authorization Action:
	//
	//```
	//iam:policies:update
	//```
	UpdatePolicy(context.Context, *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	//
	//Authorization Action:
	//
	//```
	//iam:policies:get
	//```
	GetPolicyVersion(context.Context, *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:get
	//```
	ListPolicyMembers(context.Context, *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list for a specific policy with a new list.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:update
	//```
	ReplacePolicyMembers(context.Context, *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove specific members from the member list for a specific policy. Silently ignores
	//members that are not already part of the member list.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//The removed members will still exist within Chef Automate, but are no longer associated with this policy.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:delete
	//```
	RemovePolicyMembers(context.Context, *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add specific members to the member list for a specific policy.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression]({{< relref "iam-v2-guide.md#member-expressions" >}}) format.
	//
	//Authorization Action:
	//
	//```
	//iam:policyMembers:create
	//```
	AddPolicyMembers(context.Context, *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error)
	//
	//Create a new role
	//
	//Creates a new role to be used in the policies that control permissions in Automate.
	//
	//A role defines the scope of actions in a policy statement.
	//
	//There are several default *Chef-managed* roles that are essential to the operation of Chef Automate
	//and cannot be altered.
	//Roles that you create are *Custom* roles, and you have full control about modifying or deleting them.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:create
	//```
	CreateRole(context.Context, *request.CreateRoleReq) (*response.CreateRoleResp, error)
	//
	//List all roles
	//
	//List all *Chef-managed* and *Custom* roles.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:list
	//```
	ListRoles(context.Context, *request.ListRolesReq) (*response.ListRolesResp, error)
	//
	//Get a role
	//
	//Get a role.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:get
	//```
	GetRole(context.Context, *request.GetRoleReq) (*response.GetRoleResp, error)
	//
	//Delete a role
	//
	//Delete a specified role and removes it from any statements that may have been using it.
	//If such a statement has no other associated actions, the statement is deleted as well.
	//Similarly, if that statement removal results in a policy with no other statements,
	//that policy is removed as well.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:delete
	//```
	DeleteRole(context.Context, *request.DeleteRoleReq) (*response.DeleteRoleResp, error)
	//
	//Update a role
	//
	//When updating a role supply all of a role's properties, not just the ones you wish to update.
	//Properties that you do not include are reset to empty values.
	//The only exception is the role ID, which is immutable; it can only be set at creation time.
	//
	//Authorization Action:
	//
	//```
	//iam:roles:update
	//```
	UpdateRole(context.Context, *request.UpdateRoleReq) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the policies that control permissions in Automate.
	//
	//A project defines the scope of resources in a policy statement. Resources can be in more than one project.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:create
	//```
	CreateProject(context.Context, *request.CreateProjectReq) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Update an existing project. Very similar to create except the ID cannot be changed.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:update
	//```
	UpdateProject(context.Context, *request.UpdateProjectReq) (*response.UpdateProjectResp, error)
	//
	//Get a project
	//
	//Get a project.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:get
	//```
	GetProject(context.Context, *request.GetProjectReq) (*response.GetProjectResp, error)
	//
	//List all projects
	//
	//List all projects.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:list
	//```
	ListProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Deletes the project from any resources tagged with it.
	//
	//Also deletes this project from any project list in all statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	//
	//Authorization Action:
	//
	//```
	//iam:projects:delete
	//```
	DeleteProject(context.Context, *request.DeleteProjectReq) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(context.Context, *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error)
	ResetToV1(context.Context, *request.ResetToV1Req) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
}

// UnimplementedPoliciesServer can be embedded to have forward compatible implementations.
type UnimplementedPoliciesServer struct {
}

func (*UnimplementedPoliciesServer) CreatePolicy(ctx context.Context, req *request.CreatePolicyReq) (*response.CreatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicy(ctx context.Context, req *request.GetPolicyReq) (*response.GetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicies(ctx context.Context, req *request.ListPoliciesReq) (*response.ListPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedPoliciesServer) DeletePolicy(ctx context.Context, req *request.DeletePolicyReq) (*response.DeletePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedPoliciesServer) UpdatePolicy(ctx context.Context, req *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicyVersion(ctx context.Context, req *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyVersion not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicyMembers(ctx context.Context, req *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) ReplacePolicyMembers(ctx context.Context, req *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) RemovePolicyMembers(ctx context.Context, req *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) AddPolicyMembers(ctx context.Context, req *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) CreateRole(ctx context.Context, req *request.CreateRoleReq) (*response.CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedPoliciesServer) ListRoles(ctx context.Context, req *request.ListRolesReq) (*response.ListRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedPoliciesServer) GetRole(ctx context.Context, req *request.GetRoleReq) (*response.GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedPoliciesServer) DeleteRole(ctx context.Context, req *request.DeleteRoleReq) (*response.DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedPoliciesServer) UpdateRole(ctx context.Context, req *request.UpdateRoleReq) (*response.UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedPoliciesServer) CreateProject(ctx context.Context, req *request.CreateProjectReq) (*response.CreateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedPoliciesServer) UpdateProject(ctx context.Context, req *request.UpdateProjectReq) (*response.UpdateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedPoliciesServer) GetProject(ctx context.Context, req *request.GetProjectReq) (*response.GetProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedPoliciesServer) ListProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedPoliciesServer) DeleteProject(ctx context.Context, req *request.DeleteProjectReq) (*response.DeleteProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedPoliciesServer) UpgradeToV2(ctx context.Context, req *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToV2 not implemented")
}
func (*UnimplementedPoliciesServer) ResetToV1(ctx context.Context, req *request.ResetToV1Req) (*response.ResetToV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToV1 not implemented")
}
func (*UnimplementedPoliciesServer) IntrospectAllProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectAllProjects not implemented")
}

func RegisterPoliciesServer(s *grpc.Server, srv PoliciesServer) {
	s.RegisterService(&_Policies_serviceDesc, srv)
}

func _Policies_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreatePolicy(ctx, req.(*request.CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicy(ctx, req.(*request.GetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicies(ctx, req.(*request.ListPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeletePolicy(ctx, req.(*request.DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdatePolicy(ctx, req.(*request.UpdatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, req.(*request.GetPolicyVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, req.(*request.ListPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ReplacePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReplacePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, req.(*request.ReplacePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_RemovePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemovePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, req.(*request.RemovePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_AddPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AddPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/AddPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, req.(*request.AddPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateRole(ctx, req.(*request.CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListRoles(ctx, req.(*request.ListRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetRole(ctx, req.(*request.GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteRole(ctx, req.(*request.DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateRole(ctx, req.(*request.UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateProject(ctx, req.(*request.CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateProject(ctx, req.(*request.UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetProject(ctx, req.(*request.GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteProject(ctx, req.(*request.DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpgradeToV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpgradeToV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpgradeToV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpgradeToV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpgradeToV2(ctx, req.(*request.UpgradeToV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ResetToV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetToV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ResetToV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ResetToV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ResetToV1(ctx, req.(*request.ResetToV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_IntrospectAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Policies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Policies",
	HandlerType: (*PoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policies_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policies_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Policies_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policies_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policies_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicyVersion",
			Handler:    _Policies_GetPolicyVersion_Handler,
		},
		{
			MethodName: "ListPolicyMembers",
			Handler:    _Policies_ListPolicyMembers_Handler,
		},
		{
			MethodName: "ReplacePolicyMembers",
			Handler:    _Policies_ReplacePolicyMembers_Handler,
		},
		{
			MethodName: "RemovePolicyMembers",
			Handler:    _Policies_RemovePolicyMembers_Handler,
		},
		{
			MethodName: "AddPolicyMembers",
			Handler:    _Policies_AddPolicyMembers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Policies_CreateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Policies_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Policies_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Policies_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Policies_UpdateRole_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Policies_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Policies_UpdateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Policies_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Policies_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Policies_DeleteProject_Handler,
		},
		{
			MethodName: "UpgradeToV2",
			Handler:    _Policies_UpgradeToV2_Handler,
		},
		{
			MethodName: "ResetToV1",
			Handler:    _Policies_ResetToV1_Handler,
		},
		{
			MethodName: "IntrospectAllProjects",
			Handler:    _Policies_IntrospectAllProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/policy.proto",
}
