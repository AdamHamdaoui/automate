// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/event_feed/event_feed.proto

package event_feed

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/event_feed/request"
	response "github.com/chef/automate/components/automate-gateway/api/event_feed/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/event_feed/event_feed.proto", fileDescriptor_fe4f2cb273de4e97)
}

var fileDescriptor_fe4f2cb273de4e97 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0x41, 0x4e, 0xe3, 0x30,
	0x14, 0x86, 0xd5, 0x59, 0x54, 0x9a, 0xa8, 0xa3, 0xd1, 0x58, 0x33, 0xd2, 0x28, 0xea, 0x66, 0xba,
	0x8f, 0xa3, 0x69, 0x17, 0x95, 0x8a, 0x44, 0x51, 0xab, 0x96, 0x03, 0xc0, 0x8a, 0x4d, 0xe5, 0xba,
	0xaf, 0xa9, 0xd5, 0xc4, 0x36, 0xf1, 0x0b, 0x28, 0x3b, 0xc4, 0x92, 0x2d, 0xa7, 0xe0, 0x00, 0xec,
	0x58, 0x71, 0x05, 0xae, 0xc0, 0x41, 0x50, 0xe2, 0x84, 0x36, 0x02, 0x41, 0xd3, 0x1d, 0xbb, 0xc4,
	0xf6, 0xf7, 0xbf, 0xff, 0x7f, 0xf6, 0x73, 0x0e, 0xb8, 0x8a, 0xb4, 0x92, 0x20, 0xd1, 0xf8, 0x2c,
	0x41, 0x15, 0x31, 0x04, 0x2f, 0x60, 0x08, 0x97, 0x2c, 0xf5, 0x99, 0x16, 0x3e, 0x5c, 0x80, 0xc4,
	0xd9, 0x12, 0x60, 0xb1, 0xf5, 0x49, 0x75, 0xac, 0x50, 0x91, 0x36, 0x5f, 0xc1, 0x92, 0x96, 0x18,
	0x65, 0x5a, 0xd0, 0xcd, 0x19, 0xf7, 0xb0, 0x86, 0x74, 0x0c, 0xe7, 0x09, 0x18, 0xb4, 0x4b, 0x56,
	0xdd, 0x9d, 0xec, 0xcb, 0x1b, 0x8c, 0x85, 0x0c, 0x4c, 0x21, 0x33, 0xac, 0x25, 0x63, 0xb4, 0x92,
	0x06, 0x2a, 0x3e, 0xa6, 0x7b, 0x0b, 0x54, 0x8d, 0xb4, 0x03, 0xa5, 0x82, 0x10, 0x72, 0x84, 0x49,
	0xa9, 0x90, 0xa1, 0x50, 0xb2, 0xdc, 0x3d, 0x7a, 0xb7, 0x4a, 0xac, 0xb9, 0x9f, 0xef, 0x73, 0x2f,
	0x00, 0xe9, 0x69, 0x15, 0x0a, 0x9e, 0xfa, 0x82, 0x45, 0x6f, 0x15, 0xba, 0x57, 0x4d, 0xe7, 0xfb,
	0x24, 0x2b, 0x3b, 0x05, 0x58, 0x90, 0xbb, 0x86, 0xd3, 0x3a, 0x06, 0xdc, 0x2c, 0xfc, 0xa7, 0x1f,
	0xdd, 0x16, 0x2d, 0x3a, 0x48, 0x2d, 0x20, 0x42, 0x84, 0xd8, 0xf5, 0x3e, 0x43, 0x6c, 0x58, 0xcb,
	0x98, 0x4e, 0xff, 0xe6, 0xfe, 0xef, 0x3f, 0xa7, 0x95, 0x9f, 0x18, 0xd8, 0x06, 0x90, 0x5f, 0xdb,
	0x7f, 0x83, 0x50, 0x18, 0xbc, 0x7e, 0x7a, 0xbe, 0xfd, 0xd6, 0x22, 0x8e, 0x6d, 0x51, 0x26, 0x44,
	0x1e, 0x1b, 0x0e, 0x29, 0xbd, 0x9e, 0xa6, 0x1a, 0xc6, 0x2a, 0xc9, 0xd8, 0x7e, 0x0d, 0xc7, 0x16,
	0x29, 0x7c, 0x77, 0xeb, 0xf8, 0xb6, 0x64, 0x67, 0xb8, 0xbb, 0xf9, 0xdf, 0x84, 0x14, 0x77, 0x8e,
	0xa9, 0x86, 0x19, 0xb7, 0x6e, 0x2b, 0x21, 0x98, 0x59, 0x7f, 0x9d, 0x10, 0xcc, 0xac, 0xcb, 0x10,
	0x0f, 0x0d, 0xe7, 0x4f, 0x19, 0xe2, 0x24, 0x7f, 0xbd, 0xa3, 0x84, 0xaf, 0x01, 0x0d, 0xe9, 0xd6,
	0xc8, 0x61, 0x49, 0xe3, 0xf6, 0xea, 0x44, 0x28, 0xa0, 0xce, 0x60, 0xf7, 0x0c, 0x3f, 0xc9, 0x8f,
	0xca, 0xa0, 0x8d, 0x26, 0x67, 0xe3, 0x40, 0xe0, 0x2a, 0x99, 0x53, 0xae, 0x22, 0x3f, 0x2b, 0xfe,
	0x3a, 0x4b, 0xfe, 0xee, 0x53, 0x3c, 0x6f, 0xe6, 0x03, 0xd5, 0x7b, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x5f, 0x0a, 0x47, 0x5f, 0x1d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventFeedClient is the client API for EventFeed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventFeedClient interface {
	GetEventFeed(ctx context.Context, in *request.EventFilter, opts ...grpc.CallOption) (*response.Events, error)
	GetEventTypeCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error)
	GetEventTaskCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error)
	GetEventStringBuckets(ctx context.Context, in *request.EventStrings, opts ...grpc.CallOption) (*response.EventStrings, error)
}

type eventFeedClient struct {
	cc grpc.ClientConnInterface
}

func NewEventFeedClient(cc grpc.ClientConnInterface) EventFeedClient {
	return &eventFeedClient{cc}
}

func (c *eventFeedClient) GetEventFeed(ctx context.Context, in *request.EventFilter, opts ...grpc.CallOption) (*response.Events, error) {
	out := new(response.Events)
	err := c.cc.Invoke(ctx, "/chef.automate.api.event_feed.EventFeed/GetEventFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedClient) GetEventTypeCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	out := new(response.EventCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.event_feed.EventFeed/GetEventTypeCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedClient) GetEventTaskCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	out := new(response.EventCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.event_feed.EventFeed/GetEventTaskCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedClient) GetEventStringBuckets(ctx context.Context, in *request.EventStrings, opts ...grpc.CallOption) (*response.EventStrings, error) {
	out := new(response.EventStrings)
	err := c.cc.Invoke(ctx, "/chef.automate.api.event_feed.EventFeed/GetEventStringBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventFeedServer is the server API for EventFeed service.
type EventFeedServer interface {
	GetEventFeed(context.Context, *request.EventFilter) (*response.Events, error)
	GetEventTypeCounts(context.Context, *request.EventCountsFilter) (*response.EventCounts, error)
	GetEventTaskCounts(context.Context, *request.EventCountsFilter) (*response.EventCounts, error)
	GetEventStringBuckets(context.Context, *request.EventStrings) (*response.EventStrings, error)
}

// UnimplementedEventFeedServer can be embedded to have forward compatible implementations.
type UnimplementedEventFeedServer struct {
}

func (*UnimplementedEventFeedServer) GetEventFeed(ctx context.Context, req *request.EventFilter) (*response.Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventFeed not implemented")
}
func (*UnimplementedEventFeedServer) GetEventTypeCounts(ctx context.Context, req *request.EventCountsFilter) (*response.EventCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTypeCounts not implemented")
}
func (*UnimplementedEventFeedServer) GetEventTaskCounts(ctx context.Context, req *request.EventCountsFilter) (*response.EventCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTaskCounts not implemented")
}
func (*UnimplementedEventFeedServer) GetEventStringBuckets(ctx context.Context, req *request.EventStrings) (*response.EventStrings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStringBuckets not implemented")
}

func RegisterEventFeedServer(s *grpc.Server, srv EventFeedServer) {
	s.RegisterService(&_EventFeed_serviceDesc, srv)
}

func _EventFeed_GetEventFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServer).GetEventFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.event_feed.EventFeed/GetEventFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServer).GetEventFeed(ctx, req.(*request.EventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeed_GetEventTypeCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventCountsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServer).GetEventTypeCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.event_feed.EventFeed/GetEventTypeCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServer).GetEventTypeCounts(ctx, req.(*request.EventCountsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeed_GetEventTaskCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventCountsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServer).GetEventTaskCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.event_feed.EventFeed/GetEventTaskCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServer).GetEventTaskCounts(ctx, req.(*request.EventCountsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeed_GetEventStringBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.EventStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServer).GetEventStringBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.event_feed.EventFeed/GetEventStringBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServer).GetEventStringBuckets(ctx, req.(*request.EventStrings))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventFeed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.event_feed.EventFeed",
	HandlerType: (*EventFeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventFeed",
			Handler:    _EventFeed_GetEventFeed_Handler,
		},
		{
			MethodName: "GetEventTypeCounts",
			Handler:    _EventFeed_GetEventTypeCounts_Handler,
		},
		{
			MethodName: "GetEventTaskCounts",
			Handler:    _EventFeed_GetEventTaskCounts_Handler,
		},
		{
			MethodName: "GetEventStringBuckets",
			Handler:    _EventFeed_GetEventStringBuckets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/event_feed/event_feed.proto",
}
