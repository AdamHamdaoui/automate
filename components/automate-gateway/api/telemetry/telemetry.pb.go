// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/telemetry/telemetry.proto

package telemetry

import (
	context "context"
	fmt "fmt"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TelemetryRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryRequest) Reset()         { *m = TelemetryRequest{} }
func (m *TelemetryRequest) String() string { return proto.CompactTextString(m) }
func (*TelemetryRequest) ProtoMessage()    {}
func (*TelemetryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52d8c6a4fd968090, []int{0}
}

func (m *TelemetryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryRequest.Unmarshal(m, b)
}
func (m *TelemetryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryRequest.Marshal(b, m, deterministic)
}
func (m *TelemetryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryRequest.Merge(m, src)
}
func (m *TelemetryRequest) XXX_Size() int {
	return xxx_messageInfo_TelemetryRequest.Size(m)
}
func (m *TelemetryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryRequest proto.InternalMessageInfo

type TelemetryResponse struct {
	LicenseId            string   `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	CustomerName         string   `protobuf:"bytes,4,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	CustomerId           string   `protobuf:"bytes,5,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	LicenseType          string   `protobuf:"bytes,6,opt,name=license_type,json=licenseType,proto3" json:"license_type,omitempty"`
	TelemetryEnabled     bool     `protobuf:"varint,7,opt,name=telemetry_enabled,json=telemetryEnabled,proto3" json:"telemetry_enabled,omitempty"`
	TelemetryUrl         string   `protobuf:"bytes,8,opt,name=telemetry_url,json=telemetryUrl,proto3" json:"telemetry_url,omitempty"`
	MaxNodes             int64    `protobuf:"varint,9,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	DeploymentId         string   `protobuf:"bytes,10,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryResponse) Reset()         { *m = TelemetryResponse{} }
func (m *TelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*TelemetryResponse) ProtoMessage()    {}
func (*TelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52d8c6a4fd968090, []int{1}
}

func (m *TelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryResponse.Unmarshal(m, b)
}
func (m *TelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryResponse.Marshal(b, m, deterministic)
}
func (m *TelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryResponse.Merge(m, src)
}
func (m *TelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_TelemetryResponse.Size(m)
}
func (m *TelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryResponse proto.InternalMessageInfo

func (m *TelemetryResponse) GetLicenseId() string {
	if m != nil {
		return m.LicenseId
	}
	return ""
}

func (m *TelemetryResponse) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

func (m *TelemetryResponse) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *TelemetryResponse) GetLicenseType() string {
	if m != nil {
		return m.LicenseType
	}
	return ""
}

func (m *TelemetryResponse) GetTelemetryEnabled() bool {
	if m != nil {
		return m.TelemetryEnabled
	}
	return false
}

func (m *TelemetryResponse) GetTelemetryUrl() string {
	if m != nil {
		return m.TelemetryUrl
	}
	return ""
}

func (m *TelemetryResponse) GetMaxNodes() int64 {
	if m != nil {
		return m.MaxNodes
	}
	return 0
}

func (m *TelemetryResponse) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func init() {
	proto.RegisterType((*TelemetryRequest)(nil), "chef.automate.api.telemetry.TelemetryRequest")
	proto.RegisterType((*TelemetryResponse)(nil), "chef.automate.api.telemetry.TelemetryResponse")
}

func init() {
	proto.RegisterFile("components/automate-gateway/api/telemetry/telemetry.proto", fileDescriptor_52d8c6a4fd968090)
}

var fileDescriptor_52d8c6a4fd968090 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0x02, 0x25, 0xde, 0xb6, 0x52, 0xb3, 0x5c, 0x4c, 0x0a, 0x22, 0x84, 0x4b, 0xa4,
	0x2a, 0xb6, 0x04, 0x27, 0x7a, 0x42, 0x05, 0x04, 0xb9, 0xf4, 0x10, 0x95, 0x0b, 0x97, 0x68, 0xb3,
	0x9e, 0xba, 0x2b, 0x79, 0x77, 0x16, 0xef, 0x58, 0xd4, 0x57, 0x8e, 0x5c, 0x79, 0x10, 0x4e, 0xbc,
	0x01, 0x4f, 0x00, 0xaf, 0xc0, 0x83, 0x20, 0xaf, 0xe3, 0x4d, 0xf9, 0xa3, 0x2a, 0xb7, 0xdd, 0xdf,
	0x7c, 0x33, 0xf3, 0x69, 0x66, 0xd8, 0x73, 0x89, 0xda, 0xa2, 0x01, 0x43, 0x2e, 0x13, 0x35, 0xa1,
	0x16, 0x04, 0xb3, 0x42, 0x10, 0x7c, 0x14, 0x4d, 0x26, 0xac, 0xca, 0x08, 0x4a, 0xd0, 0x40, 0x55,
	0xb3, 0x79, 0xa5, 0xb6, 0x42, 0x42, 0x7e, 0x24, 0x2f, 0xe1, 0x22, 0xed, 0x93, 0x52, 0x61, 0x55,
	0x1a, 0x24, 0xa3, 0x07, 0x05, 0x62, 0x51, 0x82, 0x2f, 0x21, 0x8c, 0x41, 0x12, 0xa4, 0xd0, 0xb8,
	0x2e, 0x75, 0xf4, 0xe2, 0xbf, 0x5d, 0x2b, 0x2b, 0x33, 0x1f, 0x97, 0xb3, 0x02, 0xcc, 0xcc, 0x62,
	0xa9, 0x64, 0x93, 0x29, 0xa1, 0xff, 0xad, 0x30, 0xe1, 0xec, 0xf0, 0xbc, 0x6f, 0xb6, 0x80, 0x0f,
	0x35, 0x38, 0x9a, 0x7c, 0xdd, 0x61, 0xc3, 0x6b, 0xd0, 0x59, 0x34, 0x0e, 0xf8, 0x43, 0xc6, 0x4a,
	0x25, 0xc1, 0x38, 0x58, 0xaa, 0x3c, 0x89, 0xc6, 0xd1, 0x34, 0x5e, 0xc4, 0x6b, 0x32, 0xcf, 0xf9,
	0x13, 0x76, 0x20, 0x6b, 0x47, 0xa8, 0xa1, 0x5a, 0x1a, 0xa1, 0x21, 0xb9, 0xed, 0x15, 0xfb, 0x3d,
	0x3c, 0x13, 0x1a, 0xf8, 0x23, 0xb6, 0x17, 0x44, 0x2a, 0x4f, 0xee, 0x78, 0x09, 0xeb, 0xd1, 0x3c,
	0xe7, 0x8f, 0xd9, 0x7e, 0xdf, 0x84, 0x1a, 0x0b, 0xc9, 0xae, 0x57, 0xec, 0xad, 0xd9, 0x79, 0x63,
	0x81, 0x1f, 0xb3, 0x61, 0x18, 0xcf, 0x12, 0x8c, 0x58, 0x95, 0x90, 0x27, 0x77, 0xc7, 0xd1, 0x74,
	0xb0, 0x38, 0x0c, 0x81, 0xd7, 0x1d, 0x6f, 0x5d, 0x6d, 0xc4, 0x75, 0x55, 0x26, 0x83, 0xce, 0x55,
	0x80, 0xef, 0xaa, 0x92, 0x1f, 0xb1, 0x58, 0x8b, 0xab, 0xa5, 0xc1, 0x1c, 0x5c, 0x12, 0x8f, 0xa3,
	0xe9, 0xad, 0xc5, 0x40, 0x8b, 0xab, 0xb3, 0xf6, 0xdf, 0x56, 0xc8, 0xc1, 0x96, 0xd8, 0x68, 0x30,
	0xd4, 0x9a, 0x66, 0x5d, 0x85, 0x0d, 0x9c, 0xe7, 0x4f, 0x7f, 0x44, 0x2c, 0x0e, 0x13, 0xe3, 0xdf,
	0x23, 0x76, 0xff, 0x0d, 0x50, 0x00, 0x2f, 0xd1, 0x5c, 0xa8, 0xa2, 0xae, 0xfc, 0xe0, 0xf9, 0x2c,
	0xbd, 0x61, 0xdf, 0xe9, 0xdf, 0xcb, 0x18, 0xa5, 0xdb, 0xca, 0xbb, 0x35, 0x4d, 0xde, 0x7e, 0xfe,
	0x96, 0x1c, 0xb3, 0x03, 0xd7, 0x38, 0x02, 0x7d, 0x22, 0x7d, 0x6b, 0x3e, 0x5a, 0x7f, 0xe9, 0x4f,
	0x4b, 0x27, 0x05, 0xd0, 0xa7, 0x9f, 0xbf, 0xbe, 0xec, 0xdc, 0xe3, 0xc3, 0x6b, 0x07, 0xda, 0x25,
	0x9d, 0xbe, 0x7a, 0x7f, 0x5a, 0x28, 0xba, 0xac, 0x57, 0xa9, 0x44, 0x9d, 0xb5, 0x2e, 0xc2, 0x8d,
	0x65, 0x5b, 0x5f, 0xfb, 0x6a, 0xd7, 0xdf, 0xd9, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0x46, 0x27, 0x0f, 0x21, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryClient interface {
	GetTelemetryConfiguration(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (*TelemetryResponse, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) GetTelemetryConfiguration(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (*TelemetryResponse, error) {
	out := new(TelemetryResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.telemetry.Telemetry/GetTelemetryConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
type TelemetryServer interface {
	GetTelemetryConfiguration(context.Context, *TelemetryRequest) (*TelemetryResponse, error)
}

// UnimplementedTelemetryServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (*UnimplementedTelemetryServer) GetTelemetryConfiguration(ctx context.Context, req *TelemetryRequest) (*TelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryConfiguration not implemented")
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_GetTelemetryConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).GetTelemetryConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.telemetry.Telemetry/GetTelemetryConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).GetTelemetryConfiguration(ctx, req.(*TelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTelemetryConfiguration",
			Handler:    _Telemetry_GetTelemetryConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/telemetry/telemetry.proto",
}
