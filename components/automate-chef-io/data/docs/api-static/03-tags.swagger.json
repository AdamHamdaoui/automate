{
  "x-tagGroups": [
    {
      "name": "Compliance",
      "tags": ["ReportingService", "StatsService"]
    },
    {
      "name": "Infra",
      "tags": ["ConfigMgmt"]
    },
    {
      "name": "Nodes",
      "tags": ["NodesService"]
    },
    {
      "name": "Applications",
      "tags": ["service_groups", "retention"]
    },
    {
      "name": "Identity and Access Management",
      "tags": ["policies", "roles", "projects"]
    }
  ],
  "tags": [
    { "name": "ReportingService", "x-displayName": "Reporting" },
    { "name": "StatsService", "x-displayName": "Stats" },
    { "name": "ConfigMgmt", "x-displayName": "Nodes" },
    { "name": "NodesService", "x-displayName": "Nodes" },
    { "name": "service_groups", "x-displayName": "Service Groups and Services" },
    { "name": "retention", "x-displayName": "Service Management" },
    { "name": "policies", "x-displayName": "IAM Policies",
      "description": "A policy defines permissions for who may perform what action on which resources, based on the project. The ‘who’ is a user, a team, or a system. A policy has three components, the agent, the action, and the project. The agent is a user, team, or system. Users and teams are designated by name while systems communicate with Chef Automate using pre-authorized API tokens. Actions are activities that agents can take in relation to Chef Automate’s content and operation. Projects are collections of resources, such as API tokens or ingested compliance nodes. Chef Automate IAM uses multi-statement policies, which support complex permissions in a single policy, and results in fewer policies required to secure your system. Each statement specifies a single permission. The net effect (ALLOW or DENY) of a policy is determined by evaluating the effect of each statement and combining them. If there is at least one statement allowing access, and none denying it, then the policy allows access." },
    { "name": "roles", "x-displayName": "IAM Roles" },
    { "name": "projects", "x-displayName": "IAM Projects" }
  ]
}
