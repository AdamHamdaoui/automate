// Code generated by go-bindata.
// sources:
// policy/authz.rego
// policy/authz_v2.rego
// policy/common.rego
// policy/introspection.rego
// policy/introspection_v2.rego
// policy/rule_mappings.rego
// DO NOT EDIT!

package opa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xb0\x2f\x2f\x0f\xb2\x82\xa6\x2d\x02\x04\xf0\xa1\x40\xfe\xa0\xbd\x05\x81\xb1\x11\x57\x16\x6b\x9a\x2b\x90\x94\x5b\xa7\xc8\xbf\x17\xa4\x44\xc3\x76\x0c\xe4\xd2\x9b\x34\xb3\x9c\x19\x0e\xc9\x9e\x9a\x2d\x6d\x18\x34\xc4\xee\x55\x29\xb3\xeb\xc5\x47\x68\x8a\x54\x37\xb2\xdb\x89\x3b\x83\x7a\xb1\xa6\x31\x1c\xb0\x80\x0c\x1e\xe5\x57\x29\xcd\x2d\x0d\x36\x66\x19\xf1\xe6\x95\x35\x56\x68\xc9\x06\x56\x6a\x81\xef\xc3\xcb\x4f\x6e\x62\xa8\x30\x38\x6b\xb6\x0c\xcf\x41\x06\xdf\x70\x00\x39\x0d\x6a\xa2\x11\x17\x2a\x90\x67\xf4\x5e\xf6\x46\xb3\x06\x25\x12\xe4\x3d\x1d\x6a\xb5\xc0\x8f\xce\x04\x34\x1d\x37\xdb\x80\xd8\x51\x04\x45\x58\xa6\x10\x21\x8e\x21\x2d\x62\xc7\x30\xae\x1f\x22\xc2\x64\x87\x1d\xc5\xa6\x4b\x26\x05\x82\x71\x79\x2e\x07\x3f\xd4\xaa\xa3\xb0\x9e\xa8\xa7\x5e\xec\xda\xe8\x67\xfc\x51\xb3\xb2\xaf\x82\xd5\x45\xf1\x69\xfd\x8c\x55\x5a\x9d\x56\xa9\x59\xb6\xbb\x20\x33\x36\xd2\x63\x81\x85\x5f\x4f\x69\xfe\x3b\x4e\x54\x45\xe9\x46\xbd\xa9\x9c\xa5\xf4\x72\x1a\x66\x52\x29\xd4\xb9\xcc\x11\xae\xf0\x2e\x74\xa1\x8e\xea\x63\xcf\xa7\xda\x23\x72\x21\x39\x82\x57\x04\x47\x22\xcb\xbd\x5b\x58\x21\x44\xf1\xac\x6f\x92\xac\x71\x58\x4d\xff\x1f\x0f\x8f\x9f\x58\x61\xfe\xff\x3c\x4f\x5b\x2b\xbf\xae\x9e\x02\xb7\x6d\x3a\xc3\x15\xe6\x79\x66\xae\x66\x57\xce\x6f\x04\x2f\x8b\x1c\xd1\xf3\x02\x92\x99\x66\x77\xf8\xc0\x2b\x8d\xfc\x0b\xab\xf3\x27\x93\xef\xfa\xa3\x09\xe2\x35\x7b\x7b\xa8\xb0\x63\x72\xc6\x6d\xf0\x98\x12\xc9\x9e\xbd\x37\x9a\x03\xbe\xa5\x9d\xaa\x05\x5a\xf1\x68\x07\x1f\x3b\xf6\xe0\xdf\xbd\x25\x47\xc9\xe0\x01\x5d\x8c\x7d\x78\xb8\xbd\x7d\xb1\xb2\xa9\xa5\x67\x37\xde\x6d\xda\xb0\x8b\xb5\xf8\xcd\xed\xe4\xb0\xdc\xb3\x0f\x43\x58\xea\xa3\xe7\xb2\x64\x59\xde\x7f\xba\xff\x72\xff\xb5\xb9\xfb\xac\xef\x5a\x75\xf2\x84\xd3\x0d\xc9\xfe\x33\x27\x11\xa9\x08\xf5\xa6\xfe\x06\x00\x00\xff\xff\xe1\x34\x20\xc8\x32\x04\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 1074, mode: os.FileMode(420), modTime: time.Unix(1557731321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyAuthz_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xc1\x8e\xa3\x3c\x0c\x3e\x37\x4f\xe1\x9f\x53\xa9\x50\x0f\xff\x71\x24\x9e\x04\xa1\x28\x25\xe9\x36\xb3\x81\xa0\x24\x74\x34\x33\xea\xbb\xaf\x12\x87\x00\x2d\x2d\xb3\x7b\x02\xdb\xdf\x67\x7f\x36\x4e\xe8\x59\xf3\x9b\xfd\x12\xc0\x06\x77\xf9\xa2\xd7\xff\x09\x91\x6d\xaf\x8d\x03\xce\x1c\x3b\x36\xba\x6d\x75\xb7\x70\x19\xad\x84\x5d\x78\xac\x63\x4e\xb4\xa2\x73\x96\x10\x2e\xce\x6c\x50\x2e\xa4\xd3\x46\x7e\x09\x0e\x25\x9c\x99\xb2\x82\x90\x0b\xb3\xb4\x15\xed\x49\x98\x2a\x51\xa8\xe4\x35\x7c\x93\x5d\xaf\x15\xb5\xc3\x09\xde\x4a\x98\xd2\x2d\x61\x47\xe4\xda\x8a\xd6\x64\x27\xbb\x7e\x70\x23\x23\x18\x47\x3b\x9c\xde\x45\xe3\x30\x8e\xc2\x47\x1f\x6d\x99\x6b\x2e\xc2\xee\x13\xad\x80\x58\x31\x27\x37\x54\x66\x84\xd5\x83\x69\xc4\xa3\xb6\xc9\x31\x62\x5e\xca\x1c\x41\x0b\x21\xa3\x73\xa9\x24\xb9\x0b\x78\x2c\x12\x94\x75\x9a\x7e\x48\xc5\x1b\x66\xf8\x9e\xe5\x5e\x4d\xa3\x3b\xc7\x64\x67\xf7\xac\x80\xec\x90\xe5\x50\x8e\x03\xbe\x11\xc2\x1a\x27\x75\x37\x2b\xe2\x13\x6b\x23\x78\xa0\xce\x93\x45\xb7\x9f\xa4\xcf\x80\xe6\x46\x8a\x12\xe6\xc1\xbd\xed\x95\x74\x31\x51\x01\xd9\x5b\x96\x17\x80\x3e\x4f\xf2\x76\xbe\x4c\xb7\xaf\xac\x30\x57\xe9\xdb\xcd\x0e\x59\x5d\xc0\x64\xd3\x02\x68\xed\x2b\x38\x33\x88\xa7\x2c\xf7\xd9\xaf\x70\xd1\xfb\x03\x7a\x76\xc8\x0a\xb8\x0a\x73\xba\x2f\x1d\x7c\xcf\xe8\x0b\x16\xfd\x11\xbe\x2e\x80\x4e\x61\xbf\x5d\x08\x79\xb5\x5b\x88\x78\xb9\x59\x08\xc1\xbd\x7a\xf8\x4c\x7e\x9d\xd0\x39\x5f\x26\xf4\xa4\x25\xdf\x94\xf1\xb0\xcc\x5a\x09\x28\xc1\x3f\xa8\xe4\x64\x17\x4e\x7f\x15\xcd\xb9\xa2\x11\x84\x9e\x0d\x7d\x33\x64\x92\xd6\x1b\xed\x8f\x6a\x55\xc5\x97\x79\x17\x92\xd7\x78\x4b\x18\xfd\xfe\x72\x42\x91\x8b\x23\x1a\x0d\xcf\x88\xef\x49\x8f\xb7\xf3\x04\x99\x21\x02\xf5\x46\xc8\x2a\x01\x26\x58\x92\x53\x96\x10\xcf\x78\xa3\x3b\xeb\x28\x53\x6a\xec\xc5\x2e\x35\xe0\x0c\x52\xec\x6f\x8a\xfc\xb7\x59\x04\xee\xf3\x3f\x8c\x20\x0c\x36\xf4\x16\xca\x55\x95\x38\x9f\x9f\xcc\x19\x23\x2f\x27\x8d\x10\xb2\x7b\x76\xa9\x63\x64\xfd\x52\xc5\xd8\xda\x2e\x86\x0b\x48\x29\xfd\x01\x25\x44\x95\x59\xb0\x33\x7f\xc0\x6b\xff\x7f\xe9\x3e\x67\x31\x6f\x8e\xa1\xd9\x2f\xe7\x9b\xec\x02\xcb\x5f\x79\x0e\x3c\x28\x25\x16\x3c\x6d\x5a\x7c\x86\x8e\xef\x8b\x2d\x67\x82\x82\xb7\x36\xd4\xd7\xe0\xa2\x93\x1b\x25\xa2\xe6\x7f\xad\x30\xb5\xb9\x5a\xe5\x59\x93\x69\x14\x6b\xf2\xc8\x8d\xfc\x09\x00\x00\xff\xff\x75\x34\x46\x34\x08\x08\x00\x00")

func policyAuthz_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthz_v2Rego,
		"policy/authz_v2.rego",
	)
}

func policyAuthz_v2Rego() (*asset, error) {
	bytes, err := policyAuthz_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz_v2.rego", size: 2056, mode: os.FileMode(420), modTime: time.Unix(1558000949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4f\x6f\x1b\xb7\x13\x3d\x9b\x9f\x62\x7e\xbb\x01\x24\x19\x6b\xe9\xd7\x5c\x8a\x2e\xaa\x83\x91\xf4\x52\x04\x69\x90\x18\xbd\x04\x81\x30\xcb\x1d\x69\x59\xaf\x48\x82\x33\x94\xac\x1a\xf6\x67\x2f\xc8\xd5\xca\x7f\xd2\x22\x4e\xab\x93\xc8\x9d\xf7\x1e\xe7\xcd\x23\x4b\xf8\x80\xfa\x1a\x37\x04\xda\x6d\xb7\xce\x82\x76\x56\xd0\x58\x86\x75\xb4\x5a\x8c\xb3\x0c\x68\x5b\x08\xb1\x27\x06\xe9\x50\x00\x03\x01\x77\x18\xa8\x85\x86\x64\x4f\x64\x61\xf7\x43\x2e\xda\xbd\x56\x25\xb8\x35\xb8\x18\x20\xd0\xc6\x41\xef\x36\x46\x2b\xff\x44\x41\x29\xed\x2c\xcb\x0a\xfb\x7e\xe5\x83\xfb\x83\xb4\x30\x2c\xa1\xb8\xbf\xbf\x7c\xf7\xee\xe2\xc3\xc7\xdf\x7e\xfd\xe5\xcd\xd5\xa7\xfb\xfb\x42\xa9\x52\x95\xf0\x3b\x06\x83\x4d\x4f\x40\x37\x1e\x2d\x1b\x67\x55\xa9\x94\x75\xab\xdd\xf1\x03\x4f\x71\x06\xb7\xea\x6c\x3c\xf8\x14\x2b\x28\x5e\xdd\x16\x33\x58\x2e\x61\x8d\x3d\x93\xba\x53\xea\x79\xb5\xb1\x2d\xdd\xb8\xf5\x43\xf1\xcf\xf0\x78\xeb\xae\x98\x25\x54\x09\x6f\x69\x6d\x6c\xee\x9c\x4e\x8e\xc0\x24\x9f\xa5\x9d\xc0\xbe\x33\xba\x83\x40\x12\x83\x65\x30\xc2\xb0\xc3\x3e\x12\xec\x0c\x66\x84\x8b\xe2\xa3\xc0\x28\xae\xca\x11\x4a\xed\x64\xae\x4a\x78\xef\x84\x6a\xd0\x31\x04\xb2\xd2\x1f\x2a\x70\xb6\x3f\x0c\x9d\xb6\x83\xa6\xb3\x74\x82\xc3\x9e\xe0\xda\xba\x7d\x0d\xaf\x6e\xf1\x75\x1d\x99\x82\xc5\x2d\xdd\xcd\xd5\x80\x98\xba\x60\x36\x33\x58\xc2\xa8\x91\x1a\x65\xdf\x1b\x99\x1a\xeb\xa3\xcc\x39\x36\xd9\xee\xcf\xab\x2f\x15\x14\x75\x51\xc1\xe7\x22\xb1\x14\x15\xac\x2a\x18\xf9\xbe\xcc\xd4\xd9\x89\xa1\x5e\x42\x20\xdf\xa3\xa6\xcc\x9e\xdd\x7a\xac\x5d\x3c\xe0\xb2\x63\x7b\xd3\xb7\x1a\x43\x7b\xb4\x99\x6c\xcb\x7b\x23\x5d\x36\xb5\x3e\x1f\x5d\x7d\xd3\x91\xbe\x1e\xd2\x64\x04\x5a\x47\x0c\xd6\x09\x90\x6d\x21\x55\xe7\x52\xb8\x7c\xff\xf6\x54\x62\x86\x02\x04\x76\xbd\x11\x0c\x07\x28\xce\x8b\x07\x07\xaf\x3a\x82\x1e\x45\x28\xa4\xca\x36\x99\xc6\x6e\x00\xef\x29\xad\x27\x03\x79\xf4\x03\xff\x64\xf0\x23\x10\xbb\x18\x34\xc1\x12\xce\x27\xaa\x3c\x86\xdc\xd8\x1c\x60\x8f\x41\x0c\xf6\x10\x88\x63\x2f\x3c\x8a\x9d\x58\x71\xe7\x4c\x0b\x85\x75\x52\x54\xc7\x20\x74\x29\x42\x81\x9f\x41\xc1\x79\x31\x5b\xf3\x27\xe6\xdb\x54\x01\x53\x0a\x42\x27\xe2\xb9\x5e\x2c\x36\x46\xba\xd8\xcc\xb5\xdb\x2e\x9c\x27\x7b\xe1\x5d\x6f\xf4\xe1\x02\x37\x64\x65\xe1\x3c\x2e\x0c\x73\x24\x5e\xfc\xf8\xff\x9f\xe6\xca\x3a\x59\x7d\xcb\xe1\x87\xd8\x9f\x21\xfc\x6f\x99\x8c\x1a\x4c\xbf\xea\x0c\x03\x47\xef\x5d\x90\x1c\x2e\x26\x68\x22\xa7\x78\xf3\xd0\x7a\xad\x4a\x48\xb4\x97\x30\x8a\xc0\x16\x0f\x43\x28\x9d\xd6\x31\x24\x6f\x24\x7b\xcd\x02\x4c\xf9\x36\x24\x63\xa6\xcd\x57\xa0\x34\xae\x26\xdf\xf9\xc6\x58\x3a\xce\x15\xc1\x07\x5a\x9b\x1b\x98\xd2\x7c\x33\x07\x8d\x36\x95\x31\x1e\xa0\xb8\xa9\x0f\xf5\xda\xb9\xf3\x62\x96\x09\xf5\x13\x42\xf4\xbe\x37\xe9\x16\xba\x2c\x7f\xbc\x30\xe3\x09\xf2\xdb\x83\xf6\x00\x2d\x91\xa7\x30\x6e\xb3\x2a\x21\xfd\x06\xad\x02\x53\xa6\xb6\x28\xba\x23\x4e\xab\xa6\xc8\xb8\xf4\xaf\xd6\x45\x05\x24\x7a\x3e\x9b\x9f\x02\xbc\xca\xa5\xc9\xd5\x26\xfb\xcc\x82\x41\x4e\x4e\x4b\x30\xdb\x69\x53\x25\x73\x67\x43\xa6\x55\x09\x1f\xc7\x38\x65\xa8\xb1\x1b\x55\xaa\x31\x62\xab\xa3\xf2\xd4\xd8\x0a\x58\x5c\xa0\x36\xd3\x3e\x79\xc8\x8e\xfb\x69\xf7\xd1\x9c\x4f\xbb\xc6\xa6\xd9\x0e\xcb\xa4\xf9\xef\xb8\xbf\xe6\x7d\xd6\xf2\x23\x96\x97\xa8\x7c\xe7\xf1\x8f\x4f\xd5\x7f\x13\x78\x51\x0f\x4f\x95\xfe\x5e\x6a\x35\x8c\x10\x96\x20\x21\xd2\x30\xc6\x4f\xc3\x2b\xf9\x78\x8a\xc7\x87\xf3\x9f\x8d\x7e\xc9\xb8\xbe\x41\xf2\xbd\x73\x79\x4e\xf7\xac\x95\xbf\x02\x00\x00\xff\xff\xdf\x3d\xa3\xb4\xd9\x07\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2009, mode: os.FileMode(420), modTime: time.Unix(1557924591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x51\x4d\x6a\xf3\x30\x10\x5d\x7b\x4e\x31\x38\x8b\x7c\x1f\x04\x1f\xa0\x90\x2b\xf4\x02\x26\x18\x45\x9a\xd4\x6a\x6d\x8d\x90\x46\x2d\x4d\xc9\xdd\x8b\xe4\x38\xc5\x49\x0a\xed\xa6\x4b\xbd\x79\xa3\xf7\x33\x5e\xe9\x17\xf5\x44\xa8\x92\xf4\xc7\xc6\x3a\x09\x1c\x3d\x69\xb1\xec\x00\xec\xe8\x39\x08\x1a\x25\xaa\x29\x84\x05\xa2\x79\x1c\xd9\x2d\x20\xcf\x83\xd5\x96\x22\x80\x57\x36\x74\xa3\x12\xdd\x53\xec\x02\x45\x4e\x41\x53\xdb\x7a\x1e\x3a\x6b\x36\x98\xc7\xbb\x1d\x7e\x40\x35\xaf\x9c\x47\x3b\xdc\xa2\xe7\x01\x2a\xeb\x7c\x92\x26\xf3\x62\xdb\x15\x54\xd9\x00\xd5\x24\xda\xcc\x3f\xce\x12\xff\xf2\xf4\x82\x6e\xf2\x17\x97\xd7\x7f\x38\x5d\xf9\x51\x25\xdf\x3d\x37\xdf\xa8\x4e\xed\x4c\x6b\x4b\xc9\x09\x2b\x82\x8b\x18\xe7\x41\xd1\x5e\xe1\x23\x0b\x3d\xa0\x30\x06\x92\x14\x1c\x4a\x4f\x18\xd3\x3e\x92\x20\x1f\xca\x2b\x2b\x70\xb0\x47\x32\x45\x32\xce\xb8\x0f\xfc\x6a\x0d\x19\x2c\xce\x36\xb0\x42\x4e\x01\x43\x1a\x28\xe2\x98\xa2\x60\x3d\x7d\x59\x17\xf6\x3a\xef\xae\xa7\x5b\x80\x1a\x06\x7e\x23\xd3\x65\xac\x2d\x11\xef\xf5\xdd\xd0\xe1\x40\x5a\x70\x8b\x75\x59\xa8\xe7\xb4\xbd\x8a\x5d\x4c\xfb\x67\xd2\x32\x73\xa1\xfa\xd1\x59\xaf\x68\xf7\xdb\xce\xc5\x18\x72\xf6\x37\x06\x0d\xb9\xf7\xbf\xf4\xf7\x75\x94\x2b\x8f\xb7\xd5\x42\xe5\x58\xf0\x26\x10\x9c\xe0\x33\x00\x00\xff\xff\x8b\x33\xc3\xfe\x62\x03\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 866, mode: os.FileMode(420), modTime: time.Unix(1557731321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyIntrospection_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcb\x6e\xdb\x30\x10\x3c\x6b\xbf\x62\xa1\x1c\xd2\x02\x86\x0f\x3d\x06\xd0\x2f\xf4\x07\x04\x81\x60\xc4\x75\xcd\xd6\x24\x05\x72\x95\xc2\x09\xfc\xef\x05\x49\x49\xd6\xc3\x36\xd0\x36\x27\x89\xbb\xb3\xe3\x99\xe1\x5a\x9d\x6c\x7f\xc9\x1f\x84\xb2\xe7\xe3\xbb\x78\xfb\xb6\xd7\x96\xbd\x0b\x1d\xb5\xac\x9d\x05\xd0\xa6\x73\x9e\x51\x49\x96\xfb\x11\x83\x32\x64\xfc\xa2\xdb\x3a\x63\x9c\x5d\x94\xbc\x3b\x51\x58\x54\x02\x4b\x26\x43\x96\x03\x40\xeb\x6c\x60\x11\xce\x81\xc9\x08\x3e\x77\x84\x15\x96\xf9\x58\x02\x74\x52\x7b\x61\x24\xb7\x47\x0a\xc2\x53\x70\xbd\x6f\xa9\xae\x27\x02\xa1\xd5\x0e\x23\xa8\x69\xf0\x03\x8a\x2b\xf1\x02\xd2\xec\xc7\xd1\x50\x8b\x06\x2b\xbc\x36\xc7\x06\x14\xda\x76\x3d\xef\x23\xd7\x00\x8a\xaf\x50\x64\x43\x13\xc1\x28\xe6\x4b\xec\x4e\xd5\xdd\x0d\xc6\xaf\x70\x59\xe9\x97\x29\xcd\x7f\x50\x9f\x07\x37\xda\x73\xf9\xae\xf2\x74\x39\xc3\xec\x52\x76\xae\xed\x36\x54\x9f\x28\x39\x5e\x3a\x56\x18\x1f\x42\x2b\x28\xd2\x12\xd4\xc3\x71\xe5\x28\x55\xff\xdb\xcc\x8c\x25\xf9\x48\x20\x11\x21\x75\x4d\x87\x03\xb5\x9c\x85\xcf\x6d\x6b\x95\x6d\xe4\x3e\xbe\xcc\xd2\x5d\x1b\xca\x90\x51\xc8\x51\x06\x61\xc8\xbc\x92\x5f\xc2\xa0\xf8\x8b\x8d\x5d\x81\x1f\x65\x1d\x0d\x3d\xe1\x77\xc7\xf4\x82\xec\xd0\x13\xf7\xde\x22\x1f\x09\x43\xff\x1a\x88\xd1\x1d\xd2\x29\xaa\x73\x5e\xbf\x93\x4a\x83\x61\xac\x77\xde\xbd\x69\x45\x0a\x53\xbc\x3b\x78\x42\xd7\x7b\xf4\xfd\x89\x02\x9a\x3e\x30\x96\x99\xb2\x4c\xe8\xe7\x38\xfb\x9c\xff\xab\x20\x4f\x27\xf7\x9b\x54\x4e\x32\xa9\xc1\x0a\xe7\xe1\x96\x09\x51\x8e\xe9\x8a\xa6\x01\x50\x64\xf5\xc3\x19\x45\xf6\xbc\x1c\xb9\x4a\x9f\x8f\x7d\x40\xb1\x15\x00\x85\x75\x8c\x9b\xdf\x88\x21\x4d\x60\xef\x7e\x52\xcb\xf5\xf0\x4c\x44\xc3\xfb\xc3\x6b\x1e\x30\x71\xf7\xa0\xb8\xe9\x52\xac\x17\x28\xab\xb9\xcb\x98\xbf\x69\x15\x6e\x3e\x74\x49\xee\xcc\xf4\x0d\xc5\xf7\xdc\xc0\x05\xfe\x04\x00\x00\xff\xff\x52\x82\x35\x54\xb3\x05\x00\x00")

func policyIntrospection_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospection_v2Rego,
		"policy/introspection_v2.rego",
	)
}

func policyIntrospection_v2Rego() (*asset, error) {
	bytes, err := policyIntrospection_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection_v2.rego", size: 1459, mode: os.FileMode(420), modTime: time.Unix(1558000949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyRule_mappingsRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2a\xcd\x49\x8d\xcf\x4d\x2c\x28\xc8\xcc\x4b\x2f\xe6\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x48\x49\x2c\x49\xd4\x03\x49\x15\x73\x71\x81\xa9\xf8\xb4\xfc\xa2\xf8\x82\xa2\xfc\xac\xd4\xe4\x92\xe8\xa2\xd4\xe2\xd2\x9c\x92\x58\x85\x6a\x2e\x4e\x08\x53\xc1\xca\x16\x49\x4b\x74\x66\x5e\x41\x69\x89\x1e\x54\x75\x7c\x66\x4a\x6c\x74\x7c\x2c\x57\x2d\xb2\x49\x89\x39\x39\x30\xd3\x8a\x09\x19\xc7\x55\xcb\x05\x08\x00\x00\xff\xff\xb0\xed\xb0\x1b\xad\x00\x00\x00")

func policyRule_mappingsRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyRule_mappingsRego,
		"policy/rule_mappings.rego",
	)
}

func policyRule_mappingsRego() (*asset, error) {
	bytes, err := policyRule_mappingsRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/rule_mappings.rego", size: 173, mode: os.FileMode(420), modTime: time.Unix(1557731321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego": policyAuthzRego,
	"policy/authz_v2.rego": policyAuthz_v2Rego,
	"policy/common.rego": policyCommonRego,
	"policy/introspection.rego": policyIntrospectionRego,
	"policy/introspection_v2.rego": policyIntrospection_v2Rego,
	"policy/rule_mappings.rego": policyRule_mappingsRego,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"policy": &bintree{nil, map[string]*bintree{
		"authz.rego": &bintree{policyAuthzRego, map[string]*bintree{}},
		"authz_v2.rego": &bintree{policyAuthz_v2Rego, map[string]*bintree{}},
		"common.rego": &bintree{policyCommonRego, map[string]*bintree{}},
		"introspection.rego": &bintree{policyIntrospectionRego, map[string]*bintree{}},
		"introspection_v2.rego": &bintree{policyIntrospection_v2Rego, map[string]*bintree{}},
		"rule_mappings.rego": &bintree{policyRule_mappingsRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

